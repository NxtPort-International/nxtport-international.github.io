{
  "openapi": "3.0.1",
  "info": {
    "title": "eEcd API",
    "description": "",
    "termsOfService": "http://www.nallian.com/",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/eecd"
    },
    {
      "url": "eclic.nallian.io"
    }
  ],
  "paths": {
    "/v1/equipment/{equipmentId}/history": {
      "get": {
        "tags": [
          "Booklets"
        ],
        "summary": "Opens the booklet to view the load- and cleaning history.",
        "description": "\n\r\n                    View the equipment history. Depending on your license and your relation to the equipment, you may see\r\n                    only certain parts of the booklet. Cleaners may only open the booklet if they have an active cleaning,\r\n                    loaders only when there's an active load. Equipment operators may view their equipment history at all\r\n                    times.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certified-cleaning-locations": {
      "post": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Created a certified cleaning location.",
        "description": "\n\r\n                    Certified cleaning location is used to check whether a cleaning location is qualified to issue a digital eECD.\r\n                    If the cleaning station is qualified, then eECD is valid; otherwise, eECD is invalid.\r\n                    Each seller can compose and maintain a separate (master) list of pre-certified cleaning stations + then need an eECD validity check before any load. \r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of the certified cleaning location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Get all certified cleaning locations from a seller's organisation.",
        "description": "\n\r\n                    Gets a list of all cleaning locations from the user's organisation,\r\n                    including the cleaning location details such as cleaner name, Cleaning location name, Street and number, City and Country.\r\n                    location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationSummary"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/certified-cleaning-locations/{id}": {
      "put": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Update a specific certified cleaning location.",
        "description": "\n\r\n                    Updates a specific certified cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the certified cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the updated details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Delete a certified cleaning location.",
        "description": "\n\r\n                    Deletes a certified cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the certified cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certified-cleaning-locations/verify": {
      "post": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Verify a certified cleaning location.",
        "description": "\n\r\n                    Verify a certified cleaning location by checking if there's a certified cleaning location with\r\n                    the seller organisation ID and Cleaning Location Id and if one exist check if its Certified\r\n                    until date is still valid.\r\n                \r\n\n\r\n                    Verify a certified cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner </li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of to verify the certified cleaning location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationVerify"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationVerify"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationVerify"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationVerify"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CertifiedCleaningLocation.CertifiedCleaningLocationVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              }
            }
          }
        }
      }
    },
    "/v1/certified-cleaning-locations/cleaner-verify": {
      "get": {
        "tags": [
          "CertifiedCleaningLocation"
        ],
        "summary": "Verify if cleaning location for the next load of cleaning action is certified",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "query",
            "description": "The ID of the equipment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "query",
            "description": "The ID of the cleaning action.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningLocationId",
            "in": "query",
            "description": "The ID of the cleaning location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCertifiedCleaningLocationEnum"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations": {
      "post": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Create a new cleaning location.",
        "description": "\n\r\n                    Each cleaning organisation should have at least one clenaing location, which is used to indicate\r\n                    where cleanings were performed. A cleaning action cannot be started without also specifying the\r\n                    location. Organisations that have access to the cleaning, will also be able to see the details\r\n                    of the location, including address and phone number.\r\n                \r\n\n\r\n                    The following address lines are permitted:\r\n                    <ul><li>Street and number</li><li>City</li><li>PostalCode</li><li>Country</li></ul>\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of the location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations/{id}": {
      "get": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Read a specific cleaning location.",
        "description": "\n\r\n                    Reads a specific cleaning location. Also includes a list of all users that have access to this\r\n                    location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Update a specific cleaning location.",
        "description": "\n\r\n                    Updates a specific cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the updated details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Delete a cleaning location.",
        "description": "\n\r\n                    Deletes a cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations/organisation": {
      "get": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Get all cleaning locations for an organisation.",
        "description": "\n\r\n                    Gets a list of all cleaning locations for a given organisation, including the contact details such as\r\n                    phone number and address. Does not include the users for each location.\r\n                    location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>EquipmentOperator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations/{locationId}/users": {
      "post": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Assign a user to a cleaning location.",
        "description": "\n\r\n                    Assigns a user to a cleaning locations. This effectively adds the cleaning location to the list of\r\n                    available locations for this user. If the user was already added to this location before, nothing happen\r\n                    .\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The ID of the cleaning location",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the ID of the user.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Remove a user from a cleaning location.",
        "description": "\n\r\n                    Removes a user form a cleaning location, keeping them from selecting the location when starting a\r\n                    cleaning action.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The ID of the cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the user ID.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations/{locationId}/users/bulk": {
      "post": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Assign several users to the cleaning location.",
        "description": "\n\r\n                    Assigns several users at once to a cleaning location. If one or more users were already added,\r\n                    they are skipped; no error will be raised.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The ID of the cleaning location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing a list of user IDs.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Remove several users from a cleaning location.",
        "description": "\n\r\n                    Removes several users form a cleaning location, keeping them from selecting the location when starting\r\n                    a cleaning action.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The ID of the location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing a list of user IDs.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleaningLocationData.CleaningLocationUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningLocation.CleaningLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleanings/locations/users": {
      "get": {
        "tags": [
          "CleaningLocations"
        ],
        "summary": "Get all cleaning locations for a user.",
        "description": "\n\r\n                    Gets a list of all cleaning locations to which a user has access.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user. Optional. Takes the currently logged in user if no ID is given.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningLocation.CleaningLocationSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/request": {
      "post": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Request a cleaning action.",
        "description": "\n\r\n                    Requests a new cleaning action. This is required to view the booklet containing the equipment history.\r\n                    Only one active cleaning action is permitted per equipment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the cleaning location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/request": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Update a cleaning action request.",
        "description": "\n\r\n                    Updates a cleaning action request. This can be done to any cleaning action that has state requested.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the details of the cleaning action.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions": {
      "post": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Start a cleaning action.",
        "description": "\n\r\n                    Starts a new cleaning action. This is required to view the booklet containing the equipment history.\r\n                    Only one active cleaning action is permitted per equipment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the cleaning location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningActionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Update a cleaning action.",
        "description": "\n\r\n                    Updates a cleaning action. This can be done to any cleaning action that has not yet been signed off by\r\n                    the driver.\r\n                \r\n\n\r\n                    Process.RepresentativeName or Process.CreatedBy is the name of the representative of the cleaning company and\r\n                    will be shown on the eECD.\r\n                    Process.CleaningPerformedBy is the name of the cleaning company.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the details of the cleaning action.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Get a single cleaning action.",
        "description": "\n\r\n                    Gets a single cleaning action performed on an equipment. Details include its compartments, as well as all used\r\n                    cleaning codes and comments. The\r\n                    cleaning action also specifies its type, and when it was performed.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleaningactions": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Search through the cleanings of an organisation.",
        "description": "\n\r\n                    Get all cleanings for the logged in organisation. Optionally filter by equipment, date, status or cleaning\r\n                    location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A search string to find specific equipment, by either license plate or container\r\nID. Optional. If given, it needs to be at least 2 characters long. Spaces and special characters are filtered\r\nfrom the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optiona; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "dateStart",
            "in": "query",
            "description": "The first date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "The latest date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of cleanings that may appear in the list. Optional. If not given, all\r\ncleanings will appear in the list.",
            "schema": {
              "$ref": "#/components/schemas/CleaningActionStatusEnum"
            }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "The ID of the organisation that owns the cleanings. Only available to super admins.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningLocationId",
            "in": "query",
            "description": "The ID of the cleaning location where the cleaning is planned/executed. Optional.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleaningactions/requests": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Search through the cleaning requests issued by an organisation.",
        "description": "\n\r\n                    Get all cleaning requests issued by the logged in organisation. Optionally filter by equipment, date or\r\n                    cleaning location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A search string to find specific equipment, by either license plate or container\r\nID. Optional. If given, it needs to be at least 2 characters long. Spaces and special characters are filtered\r\nfrom the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optiona; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "dateStart",
            "in": "query",
            "description": "The first date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "The latest date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "The ID of the organisation that issued the cleaning requests. Only available to super\r\nadmins.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningLocationId",
            "in": "query",
            "description": "The ID of the cleaning location where the cleaning is planned/executed. Optional.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/complete": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Complete a cleaning.",
        "description": "\n\r\n                    Completes a cleaning action. Similar to Update, with the main difference that this method alters the\r\n                    state of the cleaning action. Only planned cleaning actions can be completed.\r\n                \r\n\n\r\n                    Process.RepresentativeName or Process.CreatedBy is the name of the representative of the cleaning company and\r\n                    will be shown on the eECD.\r\n                    Process.CleaningPerformedBy is the name of the cleaning company.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the information about the cleaning action. The cleaning action\r\nwill be updated with these values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/signoff": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Sign off of the eECD by driver.",
        "description": "\n\r\n                    Sign off a cleaning action, typically done by the driver of the equipment. After the cleaning action\r\n                    has been signed, it can no longer be modified. When calling this method, a credit will be spent from\r\n                    the equipment operator's account.\r\n                \r\n\n\r\n  <code><pre>\r\n                        {\r\n                        \"DriverName\": \"John Doe\",\r\n                        \"DriverComments\" : \"Cleaning performed okay, but...\",\r\n                        \"Signature\": \"data:image/gif;base64,...\"\r\n                        }\r\n                    </pre></code>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the driver's name and signature, encoded as a base 64\r\ndata url.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.SignOffCleaning"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.SignOffCleaning"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.SignOffCleaning"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.SignOffCleaning"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.SignOffCleaning"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningSignoff"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningSignoff"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningSignoff"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningSignoff"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/postsignoffcomment": {
      "post": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Add a comment to the cleaning action.",
        "description": "\n\r\n                    Adds a comment to the cleaning action. This may be done after the driver has signed off the cleaning\r\n                    action, and may be done more than once.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The comment that needs to be added to the cleaning action.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/xml": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/signature": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Get the signature of a signed off cleaning.",
        "description": "\n\r\n                    Gets the signature of a signed off cleaning as a base-64 encoded data url.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/attachment": {
      "post": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Upload a document to a cleaning.",
        "description": "\n\r\n                    Attaches a file to the cleaning, to be stored on the server for the duration of the life time\r\n                    of the cleaning. Once the cleaning is purged from the booklet, so will its attached documents.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Attachment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Attachment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Attachment"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Attachment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/attachment/{attachmentId}": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Download a document attached to a cleaning action..",
        "description": "\n\r\n                    Returns the attached document as a downloadable file.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attached document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/cancel": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Cancel a planned cleaning.",
        "description": "\n\r\n                    Cancels a cleaning that has been started. Note that the cancelled cleaning still appears in logs\r\n                    and the booklet containing the equipment history.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>EquipmentOperator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "the ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Comment explaining why the cleaning had to be cancelled.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/xml": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/reject": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Reject a cleaning request.",
        "description": "\n\r\n                    Rejects a cleaning request that has not yet been planned. Note that the rejected cleaning still appears in logs\r\n                    and the booklet containing the equipment history.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "the ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Comment explaining why the cleaning had to be rejected.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/xml": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleaningactions/summary": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "OBSOLETE: Scheduled for removal in v2; should be replaced by v1/cleaningactions.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.CleaningSummary"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningActionId}/invalidate": {
      "put": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Invalidate a cleaning.",
        "description": "\n\r\n                    Revokes a cleaning action, to be replaced by a paper version. Only completed cleaning actions can be\r\n                    invalidated.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the information about the cleaning action.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningInvalidation"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningInvalidation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningInvalidation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningInvalidation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.CleaningInvalidation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/depotDeclaration": {
      "post": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Create a depot declaration and attach to a cleaning.",
        "description": "\n\r\n                    Create a depot declaration to a cleaning. A PDF file will be generated,\r\n                    store in blobstorage and attach to a cleaning.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the information about the depot declaration.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.Cleaning.DepotDeclarationInfo"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.Cleaning.DepotDeclarationInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.Cleaning.DepotDeclarationInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.Cleaning.DepotDeclarationInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.Cleaning.DepotDeclarationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.CleaningAction"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Download a depot declaration file.",
        "description": "\n\r\n                    Download a depot declaration from blobstorage.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cleaningactions/{cleaningId}/summary": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Get Summary of Cleaning Action",
        "description": "\n\r\n                    Get Summary of Cleaning Action.\r\n                ",
        "parameters": [
          {
            "name": "cleaningId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CleaningActionSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CleaningActionSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CleaningActionSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CleaningActionSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/cleanings/{cleaningActionId}/email": {
      "get": {
        "tags": [
          "Cleanings"
        ],
        "summary": "Non-licensed user can request for the eECD to be sent to their email",
        "description": "\n\r\n                    Non-licensed user can request for the eECD to be sent to their email\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader (Non-licensed)</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/credits/add/{amount}": {
      "post": {
        "tags": [
          "Credits"
        ],
        "summary": "Add credits to a wallet.",
        "description": "\n\r\n                    Adds credits to the wallet in the form of a credit pack. A credit pack contains credits, as well as a\r\n                    full history of all transactions made for these credits. As long as there is at least one active credit\r\n                    pack containing a credit, the organisation is allowed to perform actions requiring credits.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of credits that need to be added to the wallet. No more than 5000 credits are allowed\r\nper credit pack.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "The ID of the organisation that receives the credits. Optional. When omitted, the logged\r\nin user's organisation is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditPack"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditPack"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditPack"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditPack"
                }
              }
            }
          }
        }
      }
    },
    "/v1/credits": {
      "get": {
        "tags": [
          "Credits"
        ],
        "summary": "Get a summary of the amount of remaining credits.",
        "description": "\n\r\n                    Gets a summary of all active credit packs, including the amount of remaining credits.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/credits/warningthreshold/{warningThreshold}": {
      "put": {
        "tags": [
          "Credits"
        ],
        "summary": "Update the threshold for notifications.",
        "description": "\n\r\n                    Updates the amount of credits below which notifications should be sent to the organisations\r\n                    that own the wallet. This amount is spread accross all active credit packs; if the total sum of\r\n                    all remaining credits is below this threshold, mails will be sent in certain intervals.\r\n                \r\n\n\r\n  <b>NOTE: Email notifications are for phase 2, and are not implemented yet.</b>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "warningThreshold",
            "in": "path",
            "description": "The amount of credits below which you should be notified.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWallet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWallet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWallet"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWallet"
                }
              }
            }
          }
        }
      }
    },
    "/v1/credits/transactions": {
      "get": {
        "tags": [
          "Credits"
        ],
        "summary": "Get all transactions between two dates.",
        "description": "\n\r\n                    Gets all credit transactions between two dates. If no dates are given, <b>all</b> transactions will be\r\n                    returned.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "dateStart",
            "in": "query",
            "description": "The start date for the search. Optional; if omitted, all previous transactions\r\nup until the end date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "The end date for the search. Optional; if omitted, all transactions starting\r\nfrom the start date will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditData.CreditTransaction"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditData.CreditTransaction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditData.CreditTransaction"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditData.CreditTransaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/credits": {
      "get": {
        "tags": [
          "Credits"
        ],
        "summary": "Get the remaining credits of an organisation.",
        "description": "\n\r\n                    Gets a summary of the credits of a specific organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CreditData.CreditWalletSummary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/credits/wallets": {
      "get": {
        "tags": [
          "Credits"
        ],
        "summary": "Get a summary of the remaining credits per wallet.",
        "description": "\n\r\n                    Gets an overview of the amount of remaining credits per wallet, ordered by least amount of remaining\r\n                    credits first. The IDs of the organisations that own the wallet are included, as well as the\r\n                    threshold below which they'd like to be notified. Optionally provide a maximum amount of credits, to\r\n                    only show those wallets below this amount.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of remaining credits to show up in the results. Optional;\r\nreturns all wallets by default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum amount of results per page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.CreditData.WalletSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.CreditData.WalletSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.CreditData.WalletSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.CreditData.WalletSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/logs": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Get an overview of all created EEcds between two dates.",
        "description": "\n\r\n                    Gets a paged list of every single EEcd transaction between two dates.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "dateStart",
            "in": "query",
            "description": "The start date of the search.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "The end date of the search.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EEcdLog.EEcdLog"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EEcdLog.EEcdLog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EEcdLog.EEcdLog"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EEcdLog.EEcdLog"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/document": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Generate an eecd document from a cleaning in a booklet.",
        "description": "\n\r\n                    Generates a downloadable Eecd document based on a cleaning still in a booklet.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/language/{languageCode}/document": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Generate an eecd document from a cleaning in a booklet.",
        "description": "\n\r\n                    Generates a downloadable Eecd document based on a cleaning still in a booklet.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/archives/{id}": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Download an archived eECD.",
        "description": "\n\r\n                    Serves the archived eECD as a downloadable pdf.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/archives/{id}/language/{languageCode}": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Dynamically generate and download an eECD given a language code",
        "description": "\n\r\n                    Serves the eECD as a downloadable pdf.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/archives/{id}/attachments": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Download an archived eECD's attachments.",
        "description": "\n\r\n                    Serves the archived eECD's attachments as a downloadable zip.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/archives/{id}/depotDeclaration": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Download an archived depot declaration.",
        "description": "\n\r\n                    Serves the archived depot declaration as a downloadable pdf.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/archives": {
      "get": {
        "tags": [
          "EEcds"
        ],
        "summary": "Search archived eECDs.",
        "description": "\n\r\n                    Gives a paged, filterable overview of archived eECD's for an organisation.\r\n                    Search url cannot be longer than 2048 characters on Internet Explorer.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "equipmentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "uniqueEquipmentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadingLocation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hasBeenDownloaded",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cleaningInternalReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transportOrderReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleaningCustomerReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outboundDeliveryReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleaningLocationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "equipmentOperatorName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleaningCompanyName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loaderName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleaningLocationName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endedAtUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "completedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "completedAtUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "signedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "signedAtUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "loadCompletedAtFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "loadCompletedAtUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEecdMetadataDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEecdMetadataDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEecdMetadataDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEecdMetadataDetail"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/send-eecd-with-transport-order": {
      "post": {
        "tags": [
          "EEcds"
        ],
        "summary": "Send related eecds to email related to a transport order.",
        "description": "\n\r\n                    Send related eecds to email related to a transport order.\r\n                ",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/eecds/send-test-eecd": {
      "post": {
        "tags": [
          "EEcds"
        ],
        "summary": "Send a test Eecd to requested email.",
        "description": "\n\r\n                    Send a test Eecd to requested email.\r\n                ",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Document.SendEEcdWithTransportOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/request/document": {
      "get": {
        "tags": [
          "EEcos"
        ],
        "summary": "Generate an eeco document from a cleaning request in a booklet.",
        "description": "\n\r\n                    Generates a downloadable Eeco document based on a cleaning request still in a booklet.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/equipment/{equipmentId}/cleaningactions/{cleaningId}/language/{languageCode}/request/document": {
      "get": {
        "tags": [
          "EEcos"
        ],
        "summary": "Generate an eeco document from a cleaning request in a booklet.",
        "description": "\n\r\n                    Generates a downloadable Eeco document based on a cleaning request still in a booklet.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleaningId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eftcocleaningcodes": {
      "get": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Get all EFTCO codes.",
        "description": "\n\r\n                    Gets all EFTCO cleaning codes, including a description in the desired language. If no language is\r\n                    given, Dutch descriptions will be returned.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The language in which the descriptions need to be returned. Either NL, EN, FR or DE.",
            "schema": {
              "$ref": "#/components/schemas/LanguageEnum"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Optional. Search string to narrow down the results to only contain the specified\r\ncode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeSummary"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeSummary"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Create an EFTCO code.",
        "description": "\n\r\n                    Creates an EFTCO cleaning code, including descriptions in all supported languages. The name of the\r\n                    updated code may not already exist, and all descriptions must be filled in. We currently support\r\n                    the following languages: NL, EN, FR and DE. At least all of these languages must be present in the\r\n                    DTO, but additional ones may be given if desired.\r\n                \r\n<code><pre>\r\n                    POST v1/eftcocleaningcodes\r\n                    {\r\n                    \"code\" : \"Hello World\",\r\n                    \"descriptions\" : {\r\n                    \"EN\" : \"Hello world!\",\r\n                    \"NL\" : \"Hallo wereld!\",\r\n                    \"FR\" : \"Bonjour monde!\",\r\n                    \"DE\" : \"Gutentag Welt!\"\r\n                    }\r\n                    }\r\n                </pre></code>\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The code, as well as descriptions in (at least) all supported languages.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/eftcocleaningcodes/validate": {
      "get": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Check whether the cleaning would pass validation.",
        "description": "\n\r\n                    Checks whether the set of used EFTCO cleaning codes is considered valid for the specified type of\r\n                    cleaning. Standard cleanings have no demands other than that the passed Eftco cleaning codes need\r\n                    to be known by the application, but polymer cleanings need to adhere to a specific set of required\r\n                    and optional codes. If a code is optional, it needs to be accompanied by a comment explaining its\r\n                    absense.\r\n                \r\n\n\r\n  <code><pre>\r\n                        /equipment/cleaningactions/validate?type=polymer&codes=E58,T01,E63,P10,E61,E62,E64,E77,E78,E72&\r\n                        commented=E57,E56\r\n                        Result:\r\n                        {\r\n                        \"isValid\": false,\r\n                        \"errors\": [\r\n                        \"Code E79 is required, but was not found.\",\r\n                        \"Code E90 is optional, but was not found, and was not yet commented.\",\r\n                        \"At least 1 of the following codes need(s) to be present: E35, P30.\"\r\n                        ],\r\n                        \"missingOptionalCodesCodes\": [\r\n                        \"E90\"\r\n                        ]\r\n                        }\r\n                    </pre></code>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type of cleaning. Either Standard or Polymer.",
            "schema": {
              "$ref": "#/components/schemas/CleaningTypeEnum"
            }
          },
          {
            "name": "codes",
            "in": "query",
            "description": "The comma-seperated list of EFTCO cleaning codes that have been used to clean the\r\nequipment.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "commented",
            "in": "query",
            "description": "The comma-seperated list of EFTCO cleaning codes that are missing, but are\r\naccompanied by a comment indicating the reason for them not having been used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/cleaningactions/validate": {
      "get": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Check whether the cleaning would pass validation.",
        "description": "\n\r\n                    Checks whether the set of used EFTCO cleaning codes is considered valid for the specified type of\r\n                    cleaning. Standard cleanings have no demands other than that the passed Eftco cleaning codes need\r\n                    to be known by the application, but polymer cleanings need to adhere to a specific set of required\r\n                    and optional codes. If a code is optional, it needs to be accompanied by a comment explaining its\r\n                    absense.\r\n                \r\n\n\r\n  <code><pre>\r\n                        /equipment/cleaningactions/validate?type=polymer&codes=E58,T01,E63,P10,E61,E62,E64,E77,E78,E72&\r\n                        commented=E57,E56\r\n                        Result:\r\n                        {\r\n                        \"isValid\": false,\r\n                        \"errors\": [\r\n                        \"Code E79 is required, but was not found.\",\r\n                        \"Code E90 is optional, but was not found, and was not yet commented.\",\r\n                        \"At least 1 of the following codes need(s) to be present: E35, P30.\"\r\n                        ],\r\n                        \"missingOptionalCodesCodes\": [\r\n                        \"E90\"\r\n                        ]\r\n                        }\r\n                    </pre></code>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>EquipmentOperator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type of cleaning. Either Standard or Polymer.",
            "schema": {
              "$ref": "#/components/schemas/CleaningTypeEnum"
            }
          },
          {
            "name": "codes",
            "in": "query",
            "description": "The comma-seperated list of EFTCO cleaning codes that have been used to clean the\r\nequipment.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "commented",
            "in": "query",
            "description": "The comma-seperated list of EFTCO cleaning codes that are missing, but are\r\naccompanied by a comment indicating the reason for them not having been used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Cleaning.CodeValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eftcocleaningcodes/{id}": {
      "get": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Read an EFTCO cleaning code.",
        "description": "\n\r\n                    Reads an EFTCO cleaning code including descriptions in all supported languages, if it exists. As\r\n                    this returns all information about the entity, rather than just a summary, this call is only\r\n                    accessible to Community Admins.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EFTCO cleaning code.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Update an EFTCO cleaning code.",
        "description": "\n\r\n                    Updates an EFTCo cleaning code. The same rules apply as for creating the EFTCO cleaning code.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EFTCO cleaning code.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated details of the EFTCO cleaning code.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EftcoCleaningCodes.EftcoCleaningCodeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/EftcoCleaningCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Delete an EFTCO cleaning code.",
        "description": "\n\r\n                    Deletes an EFTCO cleaning code, if it exists.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cleaning code.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/eftcocleaningcodes/search": {
      "get": {
        "tags": [
          "EftcoCleaningCodes"
        ],
        "summary": "Search EFTCO cleaning codes.",
        "description": "\n\r\n                    Allows you to search for EFTCO cleaning codes. This differs from /v1/eftcocleaningcodes in that this\r\n                    method returns entire entities, including creation- and update details. This also includes all\r\n                    languages, rather than just the one requested in the other call. It is for that reason that this\r\n                    call is restricted to Community Admins.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Part of the cleaning code you're looking for. Optional; defaults to all codes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/eppls/{epplId}/document": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Generate an eppl document from an eppl in a booklet (OBSOLETE).",
        "description": "\n\r\n                    Generates a downloadable Eppl document based on an eppl still in a booklet.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "epplId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/equipment/{equipmentId}/eppls/{epplId}/language/{languageCode}/document": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Generate an eppl document from an eppl in a booklet by chosen language.",
        "description": "\n\r\n                    Generates a downloadable Eppl document based on an eppl meta data in a chosen language.\r\n                \r\n\n\r\n                    Based on the chosen language, the translation in the language will be provided.\r\n                    If a chosen language doesn't exists, default language \"EN\" will be given.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "epplId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/eppls/{epplId}": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Get a single eppl.",
        "description": "\n\r\n                    Gets a single eppl signed off for an equipment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "epplId",
            "in": "path",
            "description": "The ID of the eppl.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EPpl.Eppl"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EPpl.Eppl"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EPpl.Eppl"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EPpl.Eppl"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eppls/archives/{archiveId}": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Download an archived ePPL (OBSOLETE).",
        "description": "\n\r\n                    Serves the archived ePPL as a downloadable pdf.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "archiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/eppls/archives/{archiveId}/language/{languageCode}": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Download an archived ePPL by language.",
        "description": "\n\r\n                    Serves the archived ePPL as a downloadable pdf.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "archiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "languageCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eppls/archives": {
      "get": {
        "tags": [
          "EPpls"
        ],
        "summary": "Search archived ePPL's.",
        "description": "\n\r\n                    Gives a paged, filterable overview of archived ePPL's for an organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "equipmentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "uniqueEquipmentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadingLocation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hasBeenDownloaded",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transportOrderReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outboundDeliveryReference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "equipmentOperatorName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organisationName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loaderName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEpplMetadataDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEpplMetadataDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEpplMetadataDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.EecdDocument.ArchivedEpplMetadataDetail"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Search for equipment. Obsolete; please use the paged version instead.",
        "description": "\n\r\n                    Searches for equipment of a specific equipment operator, that satisfies the search condition. Obsolete;\r\n                    better use the paged version instead, as that gives information about the amount of remaining pages.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "operatorId",
            "in": "query",
            "description": "The ID of the equipment operator.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string. Searches for license plates and container IDs.\r\nNeeds to be at least 2 characters long.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index that needs to be returned. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page that gets returned. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Create an equipment.",
        "description": "\n\r\n                    Creates a new equipment. No equipment with the same license plate or container ID may exist for the\r\n                    same equipment owner.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of the equipment.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPost"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPost"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPost"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPost"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/paged": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Search for equipment.",
        "description": "\n\r\n                    Searches for equipment of a specific equipment operator, that satisfies the search condition. The list\r\n                    that gets returned gets wrapped in a container that specifies how many more pages can be obtained.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "operatorId",
            "in": "query",
            "description": "The ID of the equipment operator.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string. Searches for license plates and container IDs.\r\nNeeds to be at least 2 characters long.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index that needs to be returned. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page that gets returned. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.Equipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.Equipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.Equipment"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.Equipment"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/transportref": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Search for equipment by transport order reference.",
        "description": "\n\r\n                    Searches for equipment that have a specific transport order reference.\r\n                    Only consider the 3 most recent loads.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "transportOrderReference",
            "in": "query",
            "description": "Keyword to search for equipment using seller's transport order reference. Only return exact match, case-insensitive.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Equipment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{id}": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Get an equipment.",
        "description": "\n\r\n                    Gets a piece of equipment. It is possible to also include the cleanliness state, giving an overview\r\n                    of the compartments and whether or not they're clean.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeCleanliness",
            "in": "query",
            "description": "Whether or not to include the cleanliness state. Optional; defaults\r\nto false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Equipment"
        ],
        "summary": "Update an equipment.",
        "description": "\n\r\n                    Updates an equipment. As with creating an equipment, the updated equipment has to have a unique license\r\n                    plate or container ID within the organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the updated details of the equipment.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPut"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPut"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPut"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPut"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentPut"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Equipment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "Equipment"
        ],
        "summary": "Delete an equipment.",
        "description": "\n\r\n                    Deletes a piece of equipment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/import": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Create multiple pieces of equipment.",
        "description": "\n\r\n                    Import a list of pieces of equipment. The list has to adhere to a few rules:\r\n                    <ul><li>It may not be longer than 200 records;</li><li>Every record must have a unique reference greater than 0;</li></ul>\r\n                    Equipment that is already known gets updated, whereas new equipment gets created. An overview of\r\n                    all modifications is returned per reference.\r\n                \r\n\n\r\n  <code><pre>\r\n                        [\r\n                        {\r\n                        \"ref\": 1,\r\n                        \"id\": \"08d5cc76-7dd3-d1ca-4f4b-e1aa5afb5a4e\",\r\n                        \"success\": true,\r\n                        \"validationErrors\": [],\r\n                        \"errorMessage\": \"\"\r\n                        },\r\n                        {\r\n                        \"ref\": 2,\r\n                        \"success\": false,\r\n                        \"validationErrors\": [\r\n                        {\r\n                        \"key\": \"LicensePlate\",\r\n                        \"errors\": [\r\n                        \"The LicensePlate field is required for type TANKTRAILER\"\r\n                        ]\r\n                        },\r\n                        {\r\n                        \"key\": \"NumberOfCompartments\",\r\n                        \"errors\": [\r\n                        \"The NumberOfCompartments field does not match the Compartments.\"\r\n                        ]\r\n                        }\r\n                        ],\r\n                        \"errorMessage\": \"The LicensePlate field is required for type TANKTRAILER\\nThe NumberOfCompartments field\r\n                        does not match the Compartments.\"\r\n                        }\r\n                        ]\r\n                    </pre></code>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of equipment.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/bulk": {
      "delete": {
        "tags": [
          "Equipment"
        ],
        "summary": "Delete multiple pieces of equipment.",
        "description": "\n\r\n                    Deleted multiple pieces of equipment in bulk. Refer to Import equipment for a more detailed\r\n                    explanation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of equipment to be deleted.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentDelete"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentDelete"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentDelete"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentDelete"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.EquipmentDelete"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/cleanliness": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Get the cleanliness state of an equipment.",
        "description": "\n\r\n                    Determines the cleanliness state of a piece of equipment. If all compartments are clean, the equipment\r\n                    is considered clean; if all compartments are dirty, it is considered dirty. Equipment can also be\r\n                    partially dirty. Compartments are either clean or dirty, there is no middle ground.\r\n                \r\n\n\r\n                    For polymer cleanings, the polymer completeness state is added as well. Regardless of whether a\r\n                    cleaning was polymer complete or not; if the cleaning was performed, it is still considered as\r\n                    clean.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment.EquipmentCleanliness"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment.EquipmentCleanliness"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment.EquipmentCleanliness"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment.EquipmentCleanliness"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/export": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Request an export of the equipment of the organisation in CSV.\r\nThe CSV is created asynchronously and will be available for download afterwards.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Equipment Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipmentfields": {
      "get": {
        "tags": [
          "EquipmentField"
        ],
        "summary": "Get all equipmentfields.",
        "description": "\n\r\n                    Returns all equipmentfields with their values.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Equipment Manager</li>\r\n    <li>Equipment Master Data Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.EquipmentField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.EquipmentField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.EquipmentField"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.EquipmentField"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "EquipmentField"
        ],
        "summary": "Create an equipmentfield.",
        "description": "\n\r\n                    Creates a new equipmentfield. No equipmentfield with the same fieldname may exist.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Equipment Master Data Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of the equipmentfield.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentField"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentField"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentField"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentField"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipmentfields/{id}": {
      "get": {
        "tags": [
          "EquipmentField"
        ],
        "summary": "Get an equipmentfield.",
        "description": "\n\r\n                    Gets an equipmentfield.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Equipment Master Data Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the equipmentfield.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EquipmentField"
        ],
        "summary": "Update an equipmentField.",
        "description": "\n\r\n                    Updates an equipmentField.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Equipment Master Data Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the equipmentField.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the details of the updated equipmentfield.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentFieldPut"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentFieldPut"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentFieldPut"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentFieldPut"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.EquipmentFieldPut"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.EquipmentField"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "EquipmentField"
        ],
        "summary": "Delete an equipmentField.",
        "description": "\n\r\n                    Deletes an equipmentField.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Equipment Master Data Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the equipmentField.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/errormessages": {
      "get": {
        "tags": [
          "ErrorMessages"
        ],
        "summary": "Returns all errormessages used in the api",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/identification-codes": {
      "post": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "Create a duns/vat/eori alias for a given organisation.",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "Attempt to translate a duns/vat/eori of an organisation to the duns/vat/eori they registered with.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/IdentificationCodeTypeEnum"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/IdentificationCodeTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/identification-codes/{id}": {
      "get": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "Read a duns/vat/eori alias.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "Update a duns/vat/eori alias.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "Delete a duns/vat/eori alias.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/identification-codes": {
      "get": {
        "tags": [
          "IdentificationCode"
        ],
        "summary": "get all duns/vat/eori aliasses for a given organisation.",
        "description": "\n\r\n                    Any one from the current organisation can call this API for their own organisation.\r\n                    Someone with User Administrator Role or Community Admin License can call this API for any organisation.\r\n                ",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IdentificationCode.IdentificationCodeDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IdentificationCode.IdentificationCodeDetail"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IdentificationCode.IdentificationCodeDetail"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/integrated": {
      "post": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Create an integrated loading location.",
        "description": "\n\r\n                    Creates an integrated loading location, effectively connecting a product and loader with the location\r\n                    specifiers\r\n                    found in transport orders.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "All info needed to create an integrated loading location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocationData.IntegratedLoadingLocation"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Get a paged list of all integrated loading locations.",
        "description": "\n\r\n                    Get a paged list of all integrated loading locations belonging to the logged in organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/integrated/{id}": {
      "get": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Get an integrated loading location by its ID.",
        "description": "\n\r\n                    Gets an integrated loading location by its ID.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the integrated loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Update an integrated loading location by its ID.",
        "description": "\n\r\n                    Updates an integrated loading location by its ID.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the integrated loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "All information needed to update the integrated loading location. Currently, only the description can\r\nbe modified.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Delete an integrated loading location by its ID.",
        "description": "\n\r\n                    Deletes an integrated loading location by its ID.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the integrated loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/locations/integrated/{uniqueReference}": {
      "get": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Get an integrated loading location for a given product by its unique reference.",
        "description": "\n\r\n                    Gets an integrated loading location for a given product by its unique reference.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "uniqueReference",
            "in": "path",
            "description": "The complete unique reference for the integrated loading location, based on the location\r\nspecifiers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/integrated/bulk": {
      "post": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Create or update a list of integrated loading locations.",
        "description": "\n\r\n                    Creates or updates a list of integrated loading locations.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of product- and organisation references, combined with the list of location\r\nspecifiers.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Delete a list of integrated loading locations.",
        "description": "\n\r\n                    Deletes a list of integrated loading locations.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of product- and organisation references, combined with the list of location\r\nspecifiers.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/integrated/search": {
      "get": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Get a list of all integrated loading locations that matches the search criteria.",
        "description": "\n\r\n                    Get a list of all integrated loading locations that matches the search criteria.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/integrated/export": {
      "get": {
        "tags": [
          "IntegratedLoadingLocations"
        ],
        "summary": "Request an export of the integrated loading locations of the organisation in CSV.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs/integration/latest": {
      "get": {
        "tags": [
          "IntegrationLog"
        ],
        "summary": "Get the most recent integration log entry for the logged in seller.",
        "description": "\n\r\n                    Gets the most recent integration log for the logged in seller.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/logs/integration/search": {
      "get": {
        "tags": [
          "IntegrationLog"
        ],
        "summary": "Search through all integrated log entries for a seller.",
        "description": "\n\r\n                    Gets a paged result containing all log entries that satisfy the given search parameters. Results are\r\n                    sorted in reverse chronological order. Organisations can only search through their own log entries.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The organisation ID of the seller.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dateStart",
            "in": "query",
            "description": "An optional date from which the search should run.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "An optional date until which the search should run.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "An optional type. Either of the following: Rejected, AcceptedWithErrors, Accepted",
            "schema": {
              "$ref": "#/components/schemas/IntegrationLogTypeEnum"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "The full transport reference. Optional. Partial searches are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentIdentifier",
            "in": "query",
            "description": "The full document identifier. Optional. Partial searches are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the original transport order. Optional. Either of the following: Original, Updated,\r\nCancelled or Other.",
            "schema": {
              "$ref": "#/components/schemas/TransportOrderStatusEnum"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs/integration/search": {
      "get": {
        "tags": [
          "IntegrationLog"
        ],
        "summary": "Search through all integrated log entries.",
        "description": "\n\r\n                    Gets a paged result containing all log entries that satisfy the given search parameters. Results are\r\n                    sorted in reverse chronological order.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "dateStart",
            "in": "query",
            "description": "An optional date from which the search should run.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "An optional date until which the search should run.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "An optional type. Either of the following: Rejected, AcceptedWithErrors, Accepted",
            "schema": {
              "$ref": "#/components/schemas/IntegrationLogTypeEnum"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "The full transport reference. Partial searches are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentIdentifier",
            "in": "query",
            "description": "The full document identifier. Partial searches are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the original transport order. Optional. Either of the following: Original, Updated,\r\nCancelled or Other.",
            "schema": {
              "$ref": "#/components/schemas/TransportOrderStatusEnum"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/_authorization/security-context": {
      "get": {
        "tags": [
          "InternalAuthorization"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Security.Authorization.Core.Controllers.SecurityContextDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Security.Authorization.Core.Controllers.SecurityContextDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Security.Authorization.Core.Controllers.SecurityContextDto"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Security.Authorization.Core.Controllers.SecurityContextDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licensee": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Search for an organisation, based on a given license role.",
        "description": "\n\r\n                    Searches for organisations of a specific role. This is typically used to search for a specific\r\n                    equipment operator, cleaner or loader.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "The role for which to search. For available roles, refer to\r\norganisations/roles.",
            "schema": {
              "$ref": "#/components/schemas/OrganisationRoleEnum"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Part of the nameof the organisation you're searching for. Needs to be at least\r\n2 characters long.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationMinimal"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationMinimal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationMinimal"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationMinimal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/license": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Get the license that is currently active for a given organisation.",
        "description": "\n\r\n                    Gets the license of an organisation. An organisation may have more than one license, but only one\r\n                    is considered active at any time. Organisations may only ask for their own license; only community\r\n                    admins may view the license for other organisations.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses": {
      "post": {
        "tags": [
          "Licenses"
        ],
        "summary": "Create a new license.",
        "description": "\n\r\n                    Creates a new license for an organisation. The license may not overlap with any existing active\r\n                    licenses for the organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the license details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses/{id}": {
      "put": {
        "tags": [
          "Licenses"
        ],
        "summary": "Update a license.",
        "description": "\n\r\n                    Updates a license. the updated license may not overlap with existing licenses.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the license.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the updated details of the license.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.License"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Licenses"
        ],
        "summary": "Delete a license.",
        "description": "\n\r\n                    Deletes a license.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the license.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses/exigent": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Get all licenses that are about to expire.",
        "description": "\n\r\n                    Gets a paged list of licenses that are about to expire, and demand attention. Do note that\r\n                    this list does not check whether or not a license is followed by another valid license- that\r\n                    will be up to the community admin. The suggestion would be to have only one active license per\r\n                    organisation at a time.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "nDaysUntilExpire",
            "in": "query",
            "description": "The maximum amount of days that a license may still be valid.\r\nOptional; defaults to 30, meaning all license expiring within the next 30 days.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.ExigentLicenseSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.ExigentLicenseSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.ExigentLicenseSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.MasterData.ExigentLicenseSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/licenses": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Get all licenses for a given organisation.",
        "description": "\n\r\n                    Gets all licenses of an organisation. Organisations may only ask for their own license; only community\r\n                    admins may view the license for other organisations.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.License"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.License"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.License"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.License"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/settings": {
      "put": {
        "tags": [
          "Licenses"
        ],
        "summary": "Update the settings on an organisation's active license.",
        "description": "\n\r\n                    Enables an admin to update his organisation's settings.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation whose settings need to be updated.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the new settings.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/License.Input.LicenseSettingsUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/License.Input.LicenseSettingsUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/License.Input.LicenseSettingsUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/License.Input.LicenseSettingsUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/License.Input.LicenseSettingsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.License"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Get settings of an organisation.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations": {
      "post": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Create a loading location.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "description": "\n\r\n                    Creates a new loading location. Sellers are responsible for maintaining a list of locations where\r\n                    their product may be loaded.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the details of the loading location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/{id}": {
      "get": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Get a specific loading location.",
        "description": "\n\r\n                    Gets a specific loading location.\r\n                    <b>NB: This is to be used for non-integrated sellers.</b>\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Update a loading location.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "description": "\n\r\n                    Updates a loading location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the details of the loading location.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingLocation.LoadingLocationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Delete a loading location.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "description": "\n\r\n                    Deletes a loading location.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the loading location.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/import": {
      "post": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Create multiple loading locations.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "description": "\n\r\n                    Creates multiple loading locations. Loading locations that already exist are simply skipped, as very\r\n                    little can be configured. Provide a list of loading locations, including a unique reference other than\r\n                    0 for each of them.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "A list of loading locations.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocationImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocationImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocationImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocationImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadingLocation.LoadingLocationImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/export": {
      "get": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Request an export of the loading locations of the organisation in CSV.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Location Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/loaders/{loaderId}/locations": {
      "get": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Get all loading locations for a specific product/loader combination.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loaderId",
            "in": "path",
            "description": "the ID of the loader.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "RThe size of each page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/locations/search": {
      "get": {
        "tags": [
          "LoadingLocations"
        ],
        "summary": "Search for loading locations.\r\n<b>NB: This is to be used for non-integrated sellers.</b>",
        "description": "\n\r\n                    Get all non-softdeleted permitted loading locations for a seller. Superadmins may provide an ID of\r\n                    another seller, else the logged in organisation will be used. Optionally filter by product, loader,\r\n                    or a combination of the two.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "sellerId",
            "in": "query",
            "description": "The ID of the seller. Optional; defaults to the logged in organisation.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "The ID of the product to filter. Optional.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loaderId",
            "in": "query",
            "description": "The ID of the loader to filter. Optional.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optional; defaults to 20;",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.LoadingLocation.LoadingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/assign": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Assigns a load to a an equipment.",
        "description": "\n\r\n                    Assigns a load to a piece of equipment. A load must be planned for one or more compartments, and must\r\n                    be planned in the future. An existing product must be given, as well as an existing licensed loader.\r\n                    none of the selected compartments may already have a planned load. The load will contain a log entry to\r\n                    indicate it being created.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the load information.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}": {
      "get": {
        "tags": [
          "Loads"
        ],
        "summary": "Get a specific load.",
        "description": "\n\r\n                    Gets a specific load of an equipment. Only equipment operators that own the equipment may request\r\n                    the load, as well as loaders for which the load was designated.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Update a planned load.",
        "description": "\n\r\n                    Updates a load, if the loader hasn't already accepted or rejected it. The same rules apply as if it\r\n                    would be created; no compartments may have assigned loads already, and the product, seller and loader\r\n                    must be licensed. The load will contain a log entry to indicate it being updated.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the details of the load.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/cancel": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Cancels a planned load.",
        "description": "\n\r\n                    Cancels a load, if it is still planned. The load will contain a log entry to indicate it being\r\n                    cancelled.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/accept": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Accept a load.",
        "description": "\n\r\n                    Accepts a planned load. If the load was planned without a specific product, it has to be given by the\r\n                    loader. The load will contain a log entry to indicate it being accepted.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the ID of the product that needs to be loaded. Optional only if\r\ndespatcher did not specify a product.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptation"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/move": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Move a load from one equipment to another.",
        "description": "\n\r\n                    Moves a load from one equipment to another. Both equipments must be owned by the operator, and the\r\n                    receiving equipment may not yet have any planned loads for any of the compartments of the moved load.\r\n                    The load will contain a log entry to indicate it being moved.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the ID of the receiving equipment, as well as a comment to\r\nspecify the reason for moving.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadMigration"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadMigration"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadMigration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadMigration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadMigration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/reject": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Reject a planned load.",
        "description": "\n\r\n                    Rejects a planned load, if for whatever reason the loader decides not to continue performing the load.\r\n                    The load will contain a log entry to indicate it being rejected, as well as a reason for the rejection.\r\n                    A notification will be sent to the despatcher that requested the load.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the reason for the rejection.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadRejection"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadRejection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadRejection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadRejection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadRejection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/complete": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Complete a load.",
        "description": "\n\r\n                    Completes a load. When completing a load, the compartments that were actually loaded need to be\r\n                    specified. These compartments need to be a subset of the compartments designated by the despatcher.\r\n                    Upon completing a load, an EEcd credit will be spent from the loader's wallet. If no credits remain,\r\n                    the load cannot be completed.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "completeMultipleLoads",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the loaded compartments.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadCompletion"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadCompletion"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadCompletion"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadCompletion"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadCompletion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/assignunofficial": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Add an non-registered load to an equipment.",
        "description": "\n\r\n                    If the previous load found in the booklet does not match with the load found in the equipment,\r\n                    an non-registered load may be added. This non-registered load is far less detailed than normal loads,\r\n                    and needs to be accompanied by proof justifying the need for an non-registered load. Please refer\r\n                    to <b>/equipment/{equipmentId}/loads/{loadId}/attachments</b> to upload documents to the\r\n                    non-registered load.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n\r\n\n\r\n                    Cleaner can only add non-registered loads if the equipment operator allowed\r\n                ",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing details about the nonregistered load, including the product\r\nname, compartments and a comment.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/addnonregistered": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Add an non-registered load to an equipment.",
        "description": "\n\r\n                    If the previous load found in the booklet does not match with the load found in the equipment,\r\n                    an non-registered load may be added. This non-registered load is far less detailed than normal loads,\r\n                    and needs to be accompanied by proof justifying the need for an non-registered load. Please refer\r\n                    to <b>/equipment/{equipmentId}/loads/{loadId}/attachments</b> to upload documents to the\r\n                    non-registered load.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n\r\n\n\r\n                    Cleaner can only add non-registered loads if the equipment operator allowed\r\n                ",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing details about the nonregistered load, including the product\r\nname, compartments and a comment.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredLoad"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/loads": {
      "get": {
        "tags": [
          "Loads"
        ],
        "summary": "Search through the loads of an organisation.",
        "description": "\n\r\n                    Get all loads for the logged in user. Optionally filter by transport reference\r\n                    (customerReference) or equipment. Transport reference needs to exactly match, whereas the\r\n                    equipmentsearch may be partial. Loads may be filtered by state as well.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "transportReference",
            "in": "query",
            "description": "The customer reference to search for. Optional. If given, the\r\nreference needs to be a complete match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outboundDeliveryReference",
            "in": "query",
            "description": "The outbound delivery reference to search for. Optional. If given, the\r\nreference needs to be a complete match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search string to find specific equipment, by either license plate or container\r\nID. Optional. If given, it needs to be at least 2 characters long. Spaces and special characters are filtered\r\nfrom the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "dateStart",
            "in": "query",
            "description": "The first date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "The latest date that is taken into account when searching. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of loads that may appear in the list. Optional. If not given, all states\r\nwill appear in the list.",
            "schema": {
              "$ref": "#/components/schemas/LoadProcessStateEnum"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "A search string to find only those loads with loading locations containing this string. Optional;\r\nwhen omitted, any loading location will do. As the loading location is a free text field entered by the despatcher,\r\nresults may vary.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByLoadPlannedAsc",
            "in": "query",
            "description": "An option to sort list of loads by date. Optional;\r\nWhen set to true, load are sorted by planned date, oldest appear first.\r\nWhen set to false, load are sorted by planned date, newest appear first.\r\nIf not given, load are sorted by most recent activity first.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.LoadSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.LoadSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.LoadSummary"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.BookletData.LoadSummary"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/unofficialproof": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Upload a document to a non-registered- or planned load.",
        "description": "\n\r\n                    Uploads a document to an non-registered- or planned load. This could be a CMR, or any other type of\r\n                    document that justifies the creation of the non-registeredproof load. A maximum of 5 documents per load is\r\n                    allowed.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/attachments": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Upload a document to a non-registered- or planned load.",
        "description": "\n\r\n                    Uploads a document to an non-registered- or planned load. This could be a CMR, or any other type of\r\n                    document that justifies the creation of the non-registeredproof load. A maximum of 5 documents per load is\r\n                    allowed.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/attachments/{attachmentId}": {
      "delete": {
        "tags": [
          "Loads"
        ],
        "summary": "Deletes an attachment from a planned load.",
        "description": "\n\r\n                    Delete an attachment in a planned load and in blobstorage. Only the uploader can remove the attachment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Equipment Operator</li>\r\n    <li>Loader</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attachment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Loads"
        ],
        "summary": "Download a document from an non-registered load.",
        "description": "\n\r\n                    Offers a document attached to an non-registered load as a downloadable file.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attached document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "downloadToDisk",
            "in": "query",
            "description": "Whether the file should be downloaded to the disk, or be opened in the browser. Optional;\r\ndefaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/unofficialproof/{attachmentId}": {
      "get": {
        "tags": [
          "Loads"
        ],
        "summary": "Download a document from an non-registered load.",
        "description": "\n\r\n                    Offers a document attached to an non-registered load as a downloadable file.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attached document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "downloadToDisk",
            "in": "query",
            "description": "Whether the file should be downloaded to the disk, or be opened in the browser. Optional;\r\ndefaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/acceptpaper": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Allows to accept a load in case there is no digital eecd. A comment will be added to the accepted load\r\nindicating that it was accepted based on a paper eecd, including an optional comment.",
        "description": "\n\r\n                    Allows to accept a load in case there is no digital eecd. A comment will be added to the accepted load\r\n                    indicating that it was accepted based on a paper eecd, including an optional comment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Contains all required info, such as the productId if it was not yet known, and",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptationForPaperEecd"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptationForPaperEecd"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptationForPaperEecd"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptationForPaperEecd"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.LoadAcceptationForPaperEecd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/loaderattachment/{loaderAttachmentType}": {
      "post": {
        "tags": [
          "Loads"
        ],
        "summary": "Upload an loader attachment to a completed load.",
        "description": "\n\r\n                    Upload an loader attachment to a completed load, such as a customer delivery note, a dangerous goods declaration,\r\n                    a customs invoice, a customs declaration, certificates of analysis, a CMR freight letter, etc...\r\n                    If an loader attachment of the same type is already presented, overwrite it.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loaderAttachmentType",
            "in": "path",
            "description": "The type of loader attachment. Case-insensitive.\r\nValid values: Others, CustomerDeliveryNote, ShippingInstructions, FreightLetter, DangerousGoodDeclaration, CustomInvoice, CustomDeclaration, CertificateOfAnalysis",
            "required": true,
            "schema": {
              "pattern": "^[A-Za-z]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/loaderattachment/{attachmentId}": {
      "get": {
        "tags": [
          "Loads"
        ],
        "summary": "Download an loader attachment from a completed load.",
        "description": "\n\r\n                    Offers an loader attachment attached to a completed load as a downloadable file.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attached document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "downloadToDisk",
            "in": "query",
            "description": "Whether the file should be downloaded to the disk, or be opened in the browser. Optional;\r\ndefaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/equipment/{equipmentId}/loads/{loadId}/loaderattachment/{loaderAttachmentId}": {
      "delete": {
        "tags": [
          "Loads"
        ],
        "summary": "Deletes an loader attachment from a completed load.",
        "description": "\n\r\n                    Delete an loader attachment in a completed load and in blobstorage.\r\n                    Any Loading Operator or Admin from the uploading Loader organisation can delete the loader attachment.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loadId",
            "in": "path",
            "description": "The ID of the load.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "loaderAttachmentId",
            "in": "path",
            "description": "The ID of the attachment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/loads/{cleaningActionId}/complete": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Complete a non-licensed user load.",
        "description": "\n\r\n                    Completes a non-licensed user load. \r\n                    Upon completing a load, an EEcd log will be created and an email will be sent to the one-time user.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the product name and comments.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/loads/{cleaningActionId}/reject": {
      "put": {
        "tags": [
          "Loads"
        ],
        "summary": "Reject a non-licensed user load.",
        "description": "\n\r\n                    Reject a non-licensed user load.\r\n                    Upon rejecting a load, an EEcd log will be created and an email will be sent to the one-time user.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "cleaningActionId",
            "in": "path",
            "description": "The ID of the cleaning action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the result.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.NonregisteredUserLoadCompletion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/addresses": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/states/cleaningactions": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/cleaningactions": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/documents": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/equipment": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/loads": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/products": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/lookups/types/transportorders": {
      "get": {
        "tags": [
          "Lookups"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/masterdata/{masterDataStorageId}/file": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Returns the requested master data storage file from storage.",
        "description": "\n\r\n                    Gets the requested masterdatastoragefile if not yet expired/deleted.\r\n                ",
        "parameters": [
          {
            "name": "masterDataStorageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/monthly-archive": {
      "get": {
        "tags": [
          "MonthlyArchive"
        ],
        "summary": "List monthly archives for an organisation",
        "description": "\n\r\n                    List monthly archives for an organisation\r\n                \r\n\n\r\n  <b>Can be called by license</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Organisation Admin</li>\r\n  </ul>\r\n\r\n<param name=\"documentType\">\r\n                Type of document (EECD, EPPL)\r\n            </param>",
        "parameters": [
          {
            "name": "documentType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/monthly-archive/report": {
      "get": {
        "tags": [
          "MonthlyArchive"
        ],
        "summary": "List monthly archives report for an organisation",
        "description": "\n\r\n                    List monthly archives report for an organisation\r\n                \r\n\n\r\n  <b>Can be called by license</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Organisation Admin</li>\r\n  </ul>\r\n\r\n<param name=\"documentType\">\r\n                Type of document (EECD, EPPL)\r\n            </param>",
        "parameters": [
          {
            "name": "documentType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.MonthlyArchiveDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/monthly-archive/{id}": {
      "get": {
        "tags": [
          "MonthlyArchive"
        ],
        "summary": "Download one monthly archive file for an organisation",
        "description": "\n\r\n                    Download one monthly archive file for an organisation\r\n                \r\n\n\r\n  <b>Can be called by license</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Organisation Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/register": {
      "post": {
        "tags": [
          "NonLicenseUser"
        ],
        "summary": "Register a non-licensed user.",
        "description": "\n\r\n                    Register a non-licensed user. \r\n                ",
        "requestBody": {
          "description": "The body containing the user's information.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NonLicenseUserCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NonLicenseUserCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NonLicenseUserCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NonLicenseUserCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NonLicenseUserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/sign-in": {
      "post": {
        "tags": [
          "NonLicenseUser"
        ],
        "summary": "Sign-in a non-licensed user.",
        "description": "\n\r\n                    Sign-in a non-licensed user. \r\n                ",
        "requestBody": {
          "description": "The body containing the user's credentials.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluSignInDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluSignInDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluSignInDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluSignInDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluSignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/non-license-user/activate": {
      "post": {
        "tags": [
          "NonLicenseUser"
        ],
        "summary": "Activate a non-licensed user.",
        "description": "\n\r\n                    Activate a non-licensed user that just recently register or haven't been active in 6 months. \r\n                ",
        "requestBody": {
          "description": "The dto containing the confirmation token.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluActivationDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluActivationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluActivationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluActivationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.NluActivationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.NluAuthenResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/one-time-booklet": {
      "post": {
        "tags": [
          "OneTimeBooklets"
        ],
        "summary": "Create the one time booklet",
        "description": "\n\r\n                    Create the one-time booklet\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n  </ul>\r\n",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeBooklet.OneTimeBookletPost"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeBooklet.OneTimeBookletPost"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeBooklet.OneTimeBookletPost"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeBooklet.OneTimeBookletPost"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeBooklet.OneTimeBookletPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/one-time-booklet/equipment-id": {
      "get": {
        "tags": [
          "OneTimeBooklets"
        ],
        "summary": "Search one time equipment unique identification string from its license number, container id or internal code",
        "description": "\n\r\n                    Search one time equipment unique identification string from its license number, container id or internal code\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.EquipmentIdentificationInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.EquipmentIdentificationInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.EquipmentIdentificationInfo"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.EquipmentIdentificationInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/one-time-booklet/{equipmentIdentifier}/cleaning/{cleaningShortCode}": {
      "get": {
        "tags": [
          "OneTimeBooklets"
        ],
        "summary": "Search one time equipment unique identification string from its license number, container id or internal code",
        "description": "\n\r\n                    Search one time equipment unique identification string from its license number, container id or internal code\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleaningShortCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.EquipmentHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/one-time-booklet/{equipmentId}/loads/accept": {
      "post": {
        "tags": [
          "OneTimeBooklets"
        ],
        "summary": "Create and accept a load for one time booklet",
        "description": "\n\r\n                    Create and accept a load for one time booklet\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the ID of the product that needs to be loaded. Optional only if\r\ndespatcher did not specify a product.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        }
      }
    },
    "/v1/one-time-booklet/{equipmentId}/loads/reject": {
      "post": {
        "tags": [
          "OneTimeBooklets"
        ],
        "summary": "Create and reject a load for one time booklet",
        "description": "\n\r\n                    Create and reject a load for one time booklet\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Loading Operator</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "The ID of the equipment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the ID of the product that needs to be loaded. Optional only if\r\ndespatcher did not specify a product.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookletData.OneTimeLoadCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BookletData.Load"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        }
      }
    },
    "/v1/organisations": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get all organisations within the community.",
        "description": "\n\r\n                    Get all organisation that have subscribed to the EEcd community. The results are packed into a\r\n                    container with information about the amount of pages.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "includeDetails",
            "in": "query",
            "description": "Whether or not to include details per organisation. Optional; defaults to\r\nfalse. Take note; setting this to true makes the method a lot slower.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.Organisations.Output.Organisation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Create an organisation.",
        "description": "\n\r\n                    Creates an organisation on the Nallian platform. Choose country code 52 for Belgium.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the organisation details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisations/{organisationId}": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get details of an organisation.",
        "description": "\n\r\n                    Get detailed information about an organisation within the EEcd community. Details include contact\r\n                    information, as well as VAT, DUNS and EORI codes.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Update details of an organisation.",
        "description": "\n\r\n                    Update details such as contact information and VAT/DUNS/EORI codes.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the updated details of the organisation.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Organisations.Input.OrganisationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisations/roles": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get available organisation roles.",
        "description": "\n\r\n                    Get a list of roles that can be assigned to an organisation. Because organisations may specify\r\n                    these roles themselves, no security context is attached to these roles. They will however help\r\n                    the community admin when creating the licenses.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisations.Output.OrganisationRole"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisations/loggedonorganisation": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get details of the logged in user's organisation.",
        "description": "\n\r\n                    Get the contact details and VAT/DUNS/EORI codes of the logged in user's organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/roles": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get all roles assigned to an organisation.",
        "description": "\n\r\n                    Gets a list of all organisation roles that have been assigned to an organisation. These roles are\r\n                    purely informative, and do not bear any meaning with regards to security.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisations/{type}/{code}": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Search for an organisation by a unique code.",
        "description": "\n\r\n                    Search for an organisation based on its DUNS, VAT or EORI code. Only returns an organisation if\r\n                    it exists, and is a member of the EEcd community.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The type of code: DUNS, VAT or EORI.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeTypeEnum"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The actual code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Organisations.Output.Organisation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/users/roles": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Get all user roles available to an organisation.",
        "description": "\n\r\n                    Get a list of all authorization roles that an organisation can give to a user. This list is\r\n                    constructed based on the organisation's license, and contains no duplicates. The list is\r\n                    ordered by role name. These roles determine which actions the user is or is not allowed to\r\n                    perform.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisationsettings/{id}": {
      "get": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Get organisationsettings by id.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organisationSettings.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Update organisationsettings.",
        "description": "\n\r\n                    Updates organisationsettings for an organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organisationsettings.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The settings for the organisation.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Delete organisationsettings.",
        "description": "\n\r\n                    Deletes organisationsettings for an organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organisationsettings.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisationsettings": {
      "post": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Create new organisationsettings.",
        "description": "\n\r\n                    Creates new organisationsettings for an organisation. The organisation cannot already have settings stored.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The settings for the organisation.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationSettings.OrganisationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/{organisationId}/location-certifier": {
      "get": {
        "tags": [
          "OrganisationSettings"
        ],
        "summary": "Check whether an organisation is a seller who can certify cleaning locations",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search for one or more products.",
        "description": "\n\r\n                    Gets a list of all products that satisfy the search conditions. You'll need to know the\r\n                    seller, and at least part of the name or article number of the product in order to search.\r\n                    Searching is case-insensitive, but special characters such as spaces and dashes are\r\n                    <b>not</b> filtered out.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "sellerId",
            "in": "query",
            "description": "The ID of the seller.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "(Part of) the name or article number of the product. Needs to be at least 2 characters\r\nlong.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Product"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Product"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Product"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.Product"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new product.",
        "description": "\n\r\n                    Creates a new product. Its article number and UN number must be unique in the database.\r\n                    If the article number or UN number already exist, it assumed that the product needs to\r\n                    be updated.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "the body containing the product details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/products/{productId}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update a product.",
        "description": "\n\r\n                    Updates a product.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Theb ody containing the updated product details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product.",
        "description": "\n\r\n                    Deletes a product.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "203": {
            "description": "Non-Authoritative Information",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product.",
        "description": "\n\r\n                    Gets a single product from the database.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/import": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create or update multiple products.",
        "description": "\n\r\n                    Create or update a list of products. The list has to adhere to a few rules:\r\n                    <ul><li>It may not be longer than 200 records;</li><li>Every record must have a unique reference greater than 0;</li></ul>\r\n                    Products that are already known get updated, whereas new products gets created. An overview\r\n                    of all modifications is returned per reference.\r\n                \r\n\n\r\n  <code><pre>\r\n                        [\r\n                        {\r\n                        \"ref\": 1,\r\n                        \"id\": \"08d5cc76-7dd3-d1ca-4f4b-e1aa5afb5a4e\",\r\n                        \"success\": true,\r\n                        \"validationErrors\": [],\r\n                        \"errorMessage\": \"\"\r\n                        },\r\n                        {\r\n                        \"ref\": 2,\r\n                        \"success\": false,\r\n                        \"validationErrors\": [\r\n                        {\r\n                        \"key\": \"ArticleName\",\r\n                        \"errors\": [\r\n                        \"The article name may not be empty.\"\r\n                        ]\r\n                        }\r\n                        ],\r\n                        \"errorMessage\": \"The article name may not be empty.\"\r\n                        }\r\n                        ]\r\n                    </pre></code>\r\n\r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of products to be imported.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/products/export": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Request an export of the products of the organisation in CSV.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/bulk": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete multiple products.",
        "description": "\n\r\n                    Deletes multiple products. Very similar to import, with the difference that any product that\r\n                    is found, gets deleted.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The list of products that need to be deleted.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductDelete"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductDelete"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductDelete"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductDelete"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.ProductDelete"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/products/{productId}/sds": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Download the SDS document.",
        "description": "\n\r\n                    Download the SDS file in the requested language, if it's available.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "The language of the SDS information.",
            "schema": {
              "$ref": "#/components/schemas/LanguageEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Core.Abstraction.StreamResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update the SDS information.",
        "description": "\n\r\n                    Update the SDS information of a product.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the SDS details.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Sds"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Sds"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Sds"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Sds"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterData.Sds"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Sds"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Sds"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Sds"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Sds"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete an SDS, whether it's a link or a file.",
        "description": "\n\r\n                    Deletes an SDS info record for a given language from a product. If the info was a link, it is\r\n                    just removed; if the info indicates that the SDS was a file, the file is made inaccessible.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "The language of the SDS that needs to be removed.",
            "schema": {
              "$ref": "#/components/schemas/LanguageEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.Product"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/sds/cloud": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Download the SDS document if available on cloud.",
        "description": "\n\r\n                    Download the SDS file in the requested language, if it's available.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "file"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/sds/import": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Import multiple SDS definitions.",
        "description": "\n\r\n                    Import one or more SDS definitions. Refer to import products for more information on the\r\n                    bulk import process.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the SDS definitions.",
          "content": {
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.SdsImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.SdsImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.SdsImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.SdsImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterData.SdsImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.BulkResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/sds/export": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Request an export of the sds of the organisation in CSV.",
        "description": "\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/sds/{language}/blob": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Upload an SDS file by product ID.",
        "description": "\n\r\n                    Overwrites an SDS document on the server with a new one. Use this method if the product ID is\r\n                    known.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the contents of the file. Either NL, EN, FR or\r\nDE.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LanguageEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/sds/{uniqueReference}/{language}/blob": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Upload an SDS file by reference.",
        "description": "\n\r\n                    Overwrites an SDS document on the server with a new one. Use this method if the product ID is\r\n                    not known.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Product Manager</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "uniqueReference",
            "in": "path",
            "description": "The unique internal reference that was specified when creating\r\nthe product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the contents of the file. Either NL, EN, FR or\r\nDE.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LanguageEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MasterData.UploadSdsDocumentResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/sds/info": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get an overview of all available SDS info.",
        "description": "\n\r\n                    Gets a list of the available SDS files or -links that can be obtained for the product.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The ID of the product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.SdsInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.SdsInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.SdsInfo"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterData.SdsInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/license-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.LicenseReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/royalty-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.RoyaltyReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/qr-scanning-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get weekly QR scanning details report",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The first date of statistic",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The last date of statistic",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.QrScanningReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/qr-scanning-frequency-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get monthly QR scanning frequency report",
        "parameters": [
          {
            "name": "reportMonth",
            "in": "query",
            "description": "The month of report generation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.QrScanningFrequencyReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/active-users-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get non-license users statistic report",
        "parameters": [
          {
            "name": "reportDate",
            "in": "query",
            "description": "The date of report generation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.NonLicenseUserReportDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/eecds-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.CreatedEecdsReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/eecos-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.CreatedEecosReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/eppls-overview": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "name": "referenceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reporting.CreatedEpplsReportDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/transportorders": {
      "post": {
        "tags": [
          "TransportOrder"
        ],
        "summary": "Import a transport order.",
        "description": "\n\r\n                    Create, update or cancel a transport order, depending on its state. The XML is parsed, and stored\r\n                    if we could determine both the Seller and the EquipmentOperator based on its contents. Even if it is\r\n                    stored, it might be that one or more delivery note lines contain errors (product not found, no loading\r\n                    location, etc).\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Transport Order Provider</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The full transport order as XML.",
          "content": {
            "text/xml": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "406": {
            "description": "Not Acceptable"
          }
        }
      }
    },
    "/v1/organisations/{sellerId}/transportorders/{transportReference}": {
      "get": {
        "tags": [
          "TransportOrder"
        ],
        "summary": "Get a transport order by its transport reference.",
        "description": "\n\r\n                    Gets the transport order with the specified transport reference. In the case of Elemica, this would\r\n                    be the shipment number. As this shipment number is only guaranteed to be unique within an organisation,\r\n                    the seller ID needs to be provided.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "description": "The organisation ID of the seller.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "transportReference",
            "in": "path",
            "description": "The reference that uniquely defines the transport order. In the case of Elemica, this\r\nwould be the shipment number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organisations/transportorders": {
      "get": {
        "tags": [
          "TransportOrder"
        ],
        "summary": "Get all transport orders for the logged in organisation.",
        "description": "\n\r\n                    Get a paged list of all transport orders where the logged in organisation is either the seller or\r\n                    the equipment operator.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Seller</li>\r\n    <li>Equipment Operator</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Despatcher</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum amount of results per page. Optional; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsPage.TransportOrders.Output.TransportOrder"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user within the EEcd community.",
        "description": "\n\r\n                    Provide a more detailed description of the method.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "requestBody": {
          "description": "The body containing the user details. Details include the preferred language\r\nof the user (defaults to English), as well as the list of authorization roles that grant or\r\ndeny access to parts of the application.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserCreate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users within the logged in users' organisation.",
        "description": "\n\r\n                    Gets a paged list of all users within the logged in user's organisation.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Community Admin</li>\r\n    <li>Location Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the page; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user.",
        "description": "\n\r\n                    Gets a user, if it is part of an organisation within the EEcd community.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Community Admin</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user.",
        "description": "\n\r\n                    Updates a specific user, if it is part of an organisation within the EEcd community.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated details of the user.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/users/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of available authentication roles.",
        "description": "\n\r\n                    Gets a list of all roles that can be assigned to users. This list does not take licenses or\r\n                    organisation roles into account; this simply is a list of all roles that the application\r\n                    supports.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{userId}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all authorization roles of a user.",
        "description": "\n\r\n                    Gets a list of roles that have been assigned to a user, if that user is a member of an\r\n                    organisation in the EEcd community.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Community Admin</li>\r\n    <li>Despatcher</li>\r\n    <li>Eecd Provisioning Admin</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's authorization roles.",
        "description": "\n\r\n                    Update the list of authorization roles to which a user has access.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated list of authrozation roles.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserRoleUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserRoleUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserRoleUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserRoleUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Users.Input.UserRoleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.UserRole"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organisations/{organisationId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users within an organisation.",
        "description": "\n\r\n                    Gets a paged list of all users of an organisation, if that organisation is a member of the\r\n                    EECD community.\r\n                \r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Eecd Provisioning Admin</li>\r\n  </ul>\r\n",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "The ID of the organisation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The index of the page. Optional; defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the page; defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users.Output.User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/loggedonuser": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the details of the logged in user.",
        "description": "\n\r\n                    Gets the details of the currently logged in user. Details include , including the user roles,\r\n                    organisation name and license.\r\n                \r\n\n\r\n  <b>Can be called by</b>\r\n  <ul>\r\n    <li>Cleaner</li>\r\n    <li>Loader</li>\r\n    <li>Equipment Operator</li>\r\n    <li>Seller</li>\r\n    <li>Community Admin</li>\r\n  </ul>\r\n\r\n\n\r\n  <b>Required roles</b>\r\n  <ul>\r\n    <li>Admin</li>\r\n    <li>Cleaning Operator</li>\r\n    <li>Despatcher</li>\r\n    <li>Equipment Manager</li>\r\n    <li>Loading Operator</li>\r\n    <li>Location Manager</li>\r\n    <li>Product Manager</li>\r\n    <li>Viewer</li>\r\n  </ul>\r\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Users.Output.User"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BookletData.Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "originalFilename": {
            "type": "string",
            "nullable": true
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "BookletData.BasicEquipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "uniqueEquipmentId": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "operatorId": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "containerId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.Cleaning.CleaningActionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "equipmentNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CleaningActionStatusEnum"
          },
          "isConsumed": {
            "type": "boolean"
          },
          "eEcd": {
            "$ref": "#/components/schemas/BookletData.EEcd"
          },
          "displayStatus": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.Cleaning.CodeValidationResult": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.ErrorResponse"
            },
            "nullable": true
          },
          "missingOptionalCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.Cleaning.DepotDeclarationInfo": {
        "required": [
          "validityDate"
        ],
        "type": "object",
        "properties": {
          "validityDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/CleaningActionStatusEnum"
          },
          "cleanedBy": {
            "$ref": "#/components/schemas/BookletData.LocationData"
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.Reference"
          },
          "process": {
            "$ref": "#/components/schemas/BookletData.CleaningProcess"
          },
          "signoff": {
            "$ref": "#/components/schemas/BookletData.CleaningSignoff"
          },
          "eEcd": {
            "$ref": "#/components/schemas/BookletData.EEcd"
          },
          "depotDeclarationAttachment": {
            "$ref": "#/components/schemas/BookletData.Attachment"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "cleanerComments": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CleaningTypeEnum"
          },
          "isUnaccompanied": {
            "type": "boolean"
          },
          "eEco": {
            "$ref": "#/components/schemas/BookletData.EEco"
          },
          "isConsumed": {
            "type": "boolean"
          },
          "reClean": {
            "type": "boolean"
          },
          "displayStatus": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "equipmentId": {
            "type": "string",
            "format": "uuid"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.PostSignoffComment"
            },
            "nullable": true
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.CompartmentCleaning"
            },
            "nullable": true
          },
          "nextLoadRequiresLocationCertifiedSellers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "isOneTimeEquipment": {
            "type": "boolean",
            "nullable": true
          },
          "carrierName": {
            "type": "string",
            "nullable": true
          },
          "carrierAddress": {
            "type": "string",
            "nullable": true
          },
          "carrierContactDetail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningActionCreate": {
        "required": [
          "compartments",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/CleaningTypeEnum"
          },
          "isUnaccompanied": {
            "type": "boolean"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cleaningId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "reClean": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningActionCreateRequest": {
        "required": [
          "cleanerId",
          "compartmentCleanings",
          "compartments",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/CleaningTypeEnum"
          },
          "isUnaccompanied": {
            "type": "boolean"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cleaningId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "reClean": {
            "type": "boolean"
          },
          "cleanerId": {
            "type": "string",
            "format": "uuid"
          },
          "estimatedTimeOfArrival": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedTimeOfPickup": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "compartmentCleanings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.CompartmentCleaning"
            }
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.Reference"
          },
          "safetyInfo": {
            "$ref": "#/components/schemas/BookletData.SafetyInfo"
          },
          "agentRequest": {
            "type": "string",
            "nullable": true
          },
          "otherRequests": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningInfo": {
        "type": "object",
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "additional": {
            "type": "string",
            "nullable": true
          },
          "commentsPerCode": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningInvalidation": {
        "required": [
          "comment"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningProcess": {
        "type": "object",
        "properties": {
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "representativeName": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "cleaningPerformedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningSignoff": {
        "type": "object",
        "properties": {
          "driverName": {
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "signedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "driverComments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "equipment": {
            "$ref": "#/components/schemas/BookletData.BasicEquipment"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CleaningActionStatusEnum"
          },
          "displayDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.Reference"
          },
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isConsumed": {
            "type": "boolean",
            "nullable": true
          },
          "reClean": {
            "type": "boolean"
          },
          "displayStatus": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CleaningUpdate": {
        "required": [
          "compartments",
          "process",
          "references"
        ],
        "type": "object",
        "properties": {
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.CompartmentCleaning"
            }
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.Reference"
          },
          "process": {
            "$ref": "#/components/schemas/BookletData.CleaningProcess"
          },
          "cleanerComments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CompartmentCleaning": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "cleaning": {
            "$ref": "#/components/schemas/BookletData.CleaningInfo"
          },
          "previousLoad": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "valid": {
            "type": "boolean"
          },
          "isPolymerComplete": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.CompartmentHistory": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "loads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.HistoricalLoad"
            },
            "nullable": true
          },
          "cleanings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.HistoricalCleaning"
            },
            "nullable": true
          },
          "ePpls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.HistoricalEPpl"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.EEcd": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "nullable": true
          },
          "valid": {
            "type": "boolean"
          },
          "expired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BookletData.EEco": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "nullable": true
          },
          "estimatedTimeOfArrival": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedTimeOfPickup": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "safetyInfo": {
            "$ref": "#/components/schemas/BookletData.SafetyInfo"
          },
          "agentRequest": {
            "type": "string",
            "nullable": true
          },
          "otherRequests": {
            "type": "string",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BookletData.EPpl.Eppl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PplStatusEnum"
          },
          "previousLoads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document.EpplCompartmentLoadHistory"
            },
            "nullable": true
          },
          "nextLoadId": {
            "type": "string",
            "format": "uuid"
          },
          "loadDetails": {
            "$ref": "#/components/schemas/BookletData.LoadDetail"
          },
          "loadReference": {
            "$ref": "#/components/schemas/BookletData.LoadReference"
          },
          "loadProduct": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "warning": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.EPplLoad": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "numberOfAllowedPreviousLoads": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursWithoutCleaning": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursPreviousLoad": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "articleNumber": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "loaderReference": {
            "type": "string",
            "nullable": true
          },
          "loaderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "equipmentOperatorReference": {
            "type": "string",
            "nullable": true
          },
          "loadingDate": {
            "type": "string",
            "format": "date-time"
          },
          "unNumber": {
            "type": "string",
            "nullable": true
          },
          "adrClass": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.EquipmentHistory": {
        "type": "object",
        "properties": {
          "equipmentId": {
            "type": "string",
            "format": "uuid"
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.CompartmentHistory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.HistoricalCleaning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/CleaningActionStatusEnum"
          },
          "cleanedBy": {
            "$ref": "#/components/schemas/BookletData.LocationData"
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.Reference"
          },
          "process": {
            "$ref": "#/components/schemas/BookletData.CleaningProcess"
          },
          "signoff": {
            "$ref": "#/components/schemas/BookletData.CleaningSignoff"
          },
          "eEcd": {
            "$ref": "#/components/schemas/BookletData.EEcd"
          },
          "depotDeclarationAttachment": {
            "$ref": "#/components/schemas/BookletData.Attachment"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "cleanerComments": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CleaningTypeEnum"
          },
          "isUnaccompanied": {
            "type": "boolean"
          },
          "eEco": {
            "$ref": "#/components/schemas/BookletData.EEco"
          },
          "isConsumed": {
            "type": "boolean"
          },
          "reClean": {
            "type": "boolean"
          },
          "displayStatus": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "cleaning": {
            "$ref": "#/components/schemas/BookletData.CleaningInfo"
          },
          "valid": {
            "type": "boolean"
          },
          "previousLoad": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.PostSignoffComment"
            },
            "nullable": true
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.HistoricalEPpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PplStatusEnum"
          },
          "loads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.EPplLoad"
            },
            "nullable": true
          },
          "nextLoadId": {
            "type": "string",
            "format": "uuid"
          },
          "ePplLoadCounter": {
            "type": "integer",
            "format": "int32"
          },
          "lastCleaningTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.HistoricalLoad": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/LoadProcessStateEnum"
          },
          "product": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "loadDetails": {
            "$ref": "#/components/schemas/BookletData.LoadDetail"
          },
          "loadProcessStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.LoadProcessState"
            },
            "nullable": true
          },
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReferenceItemLine": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "loaderAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "extraTask": {
            "$ref": "#/components/schemas/BookletData.LoadAssignmentExtraTaskEnum"
          },
          "epplId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdByOrganisation": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "referenceDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.Load": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lastStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "isAcceptedByPaper": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/LoadProcessStateEnum"
          },
          "product": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "loadDetails": {
            "$ref": "#/components/schemas/BookletData.LoadDetail"
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.LoadReference"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "processStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.LoadProcessState"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "loaderAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.Attachment"
            },
            "nullable": true
          },
          "ePplId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "extraTask": {
            "$ref": "#/components/schemas/BookletData.LoadAssignmentExtraTaskEnum"
          },
          "extraTaskError": {
            "$ref": "#/components/schemas/Common.ErrorResponse"
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadAcceptation": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadAcceptationForPaperEecd": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadAssignment": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loadDetails": {
            "$ref": "#/components/schemas/BookletData.LoadDetail"
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.LoadReference"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "extraTask": {
            "$ref": "#/components/schemas/BookletData.LoadAssignmentExtraTaskEnum"
          },
          "cleaningActionRequest": {
            "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadAssignmentExtraTaskEnum": {
        "enum": [
          "NONE",
          "ISSUEPPL",
          "ISSUEECO"
        ],
        "type": "string"
      },
      "BookletData.LoadCompletion": {
        "type": "object",
        "properties": {
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadDetail": {
        "type": "object",
        "properties": {
          "loadPlannedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "loadingLocation": {
            "type": "string",
            "nullable": true
          },
          "transportOrderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadMigration": {
        "type": "object",
        "properties": {
          "targetEquipmentId": {
            "type": "string",
            "format": "uuid"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "extraTask": {
            "$ref": "#/components/schemas/BookletData.LoadAssignmentExtraTaskEnum"
          },
          "cleaningActionRequest": {
            "$ref": "#/components/schemas/BookletData.CleaningActionCreateRequest"
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadProcessState": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/LoadProcessStateEnum"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadReference": {
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "internalReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReferenceItemLine": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadRejection": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LoadSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReferenceItemLine": {
            "type": "string",
            "nullable": true
          },
          "equipment": {
            "$ref": "#/components/schemas/BookletData.BasicEquipment"
          },
          "product": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "plannedLoadDetails": {
            "$ref": "#/components/schemas/BookletData.PlannedLoadDetails"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/LoadProcessStateEnum"
          },
          "displayDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.LocationData": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "supervisor": {
            "type": "string",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "$ref": "#/components/schemas/CleaningLocation.AddressLineResponse"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.NonregisteredLoad": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "nullable": true
          },
          "loadDate": {
            "type": "string",
            "format": "date-time"
          },
          "compartments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "unNumber": {
            "type": "string",
            "nullable": true
          },
          "references": {
            "$ref": "#/components/schemas/BookletData.LoadReference"
          }
        },
        "additionalProperties": false
      },
      "BookletData.NonregisteredUserLoadCompletion": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.OneTimeLoadCreate": {
        "type": "object",
        "properties": {
          "transportOrderReference": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.PlannedLoadDetails": {
        "type": "object",
        "properties": {
          "planner": {
            "type": "string",
            "nullable": true
          },
          "loadPlannedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.PolymerCompletenessStateEnum": {
        "enum": [
          "PolymerComplete",
          "PolymerIncomplete"
        ],
        "type": "string"
      },
      "BookletData.PostSignoffComment": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BookletData.Product": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerName": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "articleNumber": {
            "type": "string",
            "nullable": true
          },
          "articleName": {
            "type": "string",
            "nullable": true
          },
          "unNr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.Reference": {
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "internalReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookletData.SafetyInfo": {
        "type": "object",
        "properties": {
          "tankUnderPressure": {
            "type": "boolean"
          },
          "nitrogenInTank": {
            "type": "boolean"
          },
          "solidNoPressure": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BookletData.SignOffCleaning": {
        "required": [
          "driverName",
          "signature"
        ],
        "type": "object",
        "properties": {
          "driverName": {
            "minLength": 1,
            "type": "string"
          },
          "signature": {
            "minLength": 1,
            "type": "string"
          },
          "driverComments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertifiedCleaningLocation.CertifiedCleaningLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerOrganisationId": {
            "type": "string",
            "format": "uuid"
          },
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid"
          },
          "auditReportRef": {
            "type": "string",
            "nullable": true
          },
          "certifiedUntilDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CertifiedCleaningLocation.CertifiedCleaningLocationCreateOrUpdate": {
        "type": "object",
        "properties": {
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid"
          },
          "auditReportRef": {
            "type": "string",
            "nullable": true
          },
          "certifiedUntilDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CertifiedCleaningLocation.CertifiedCleaningLocationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cleanerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "cleanerName": {
            "type": "string",
            "nullable": true
          },
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "cleaningLocationName": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "$ref": "#/components/schemas/CleaningLocation.AddressLineResponse"
          },
          "auditReportRef": {
            "type": "string",
            "nullable": true
          },
          "certifiedUntilDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CertifiedCleaningLocation.CertifiedCleaningLocationVerify": {
        "type": "object",
        "properties": {
          "sellerOrganisationId": {
            "type": "string",
            "format": "uuid"
          },
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid"
          },
          "loadingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningActionStatusEnum": {
        "enum": [
          "REQUESTED",
          "PLANNED",
          "COMPLETED",
          "SIGNEDOFF",
          "CANCELLED",
          "INVALID",
          "CONSUMED"
        ],
        "type": "string"
      },
      "CleaningLocation.AddressLineResponse": {
        "type": "object",
        "properties": {
          "Street and number": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "nullable": true
          },
          "Postal code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocation.CleaningLocationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "supervisor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocation.CleaningLocationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "$ref": "#/components/schemas/CleaningLocation.AddressLineResponse"
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CleaningLocation.CleaningLocationUserResponse"
            },
            "nullable": true
          },
          "supervisor": {
            "type": "string",
            "nullable": true
          },
          "dunsCode": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocation.CleaningLocationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "$ref": "#/components/schemas/CleaningLocation.AddressLineResponse"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "supervisor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocation.CleaningLocationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "supervisor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocation.CleaningLocationUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningLocationData.CleaningLocationUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningTypeEnum": {
        "enum": [
          "STANDARD",
          "POLYMER"
        ],
        "type": "string"
      },
      "Common.BulkResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.ValidationError"
            },
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "messageCode": {
            "type": "string",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "messageTemplate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.ValidationError": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "errorResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.ErrorResponse"
            },
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "Core.Abstraction.StreamResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "stream": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadToDisk": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditPack": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "initialAmount": {
            "type": "integer",
            "format": "int32"
          },
          "currentAmount": {
            "type": "integer",
            "format": "int32"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditData.CreditTransaction"
            },
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "walletId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditPackOveralSummary": {
        "type": "object",
        "properties": {
          "depleted": {
            "type": "integer",
            "format": "int32"
          },
          "inUse": {
            "type": "integer",
            "format": "int32"
          },
          "untouched": {
            "type": "integer",
            "format": "int32"
          },
          "purchased": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditData.CreditPackSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditPackSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "remainingCredits": {
            "type": "integer",
            "format": "int32"
          },
          "initialCredits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditSummary": {
        "type": "object",
        "properties": {
          "purchased": {
            "type": "integer",
            "format": "int32"
          },
          "remaining": {
            "type": "integer",
            "format": "int32"
          },
          "spent": {
            "type": "integer",
            "format": "int32"
          },
          "spentYearToDate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "spentLastMonth": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "spentPerMonth": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditWallet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "warningThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "spentEPplCredits": {
            "type": "integer",
            "format": "int32"
          },
          "spentEEcoCredits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreditData.CreditWalletSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "warningThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "credits": {
            "$ref": "#/components/schemas/CreditData.CreditSummary"
          },
          "creditPacks": {
            "$ref": "#/components/schemas/CreditData.CreditPackOveralSummary"
          },
          "spentEpplCredits": {
            "type": "integer",
            "format": "int32"
          },
          "spentEecoCredits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreditData.WalletSummary": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "format": "uuid"
          },
          "organisations": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "warningThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "creditsPurchased": {
            "type": "integer",
            "format": "int32"
          },
          "creditsRemaining": {
            "type": "integer",
            "format": "int32"
          },
          "packsPurchased": {
            "type": "integer",
            "format": "int32"
          },
          "packsActive": {
            "type": "integer",
            "format": "int32"
          },
          "packIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditTransactionReasonEnum": {
        "enum": [
          "AddedCredits",
          "CompleteLoad",
          "CreateEecd",
          "SignOffCleaning",
          "CompleteLoadForPaperEecd",
          "InvalidateCleaningAction",
          "CompleteLoadWithEppl",
          "StartCleaningWithEeco"
        ],
        "type": "string"
      },
      "Document.ArchivedEecdLoadMetadataDetail": {
        "type": "object",
        "properties": {
          "loaderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "internalReference": {
            "type": "string",
            "nullable": true
          },
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReference": {
            "type": "string",
            "nullable": true
          },
          "loadingLocation": {
            "type": "string",
            "nullable": true
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "loadCompleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document.ArchivedEecdMetadataDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "equipmentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "equipmentOperatorName": {
            "type": "string",
            "nullable": true
          },
          "uniqueEquipmentId": {
            "type": "string",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "internalReference": {
            "type": "string",
            "nullable": true
          },
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "signedOffAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cleaningLocationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "cleaningLocationName": {
            "type": "string",
            "nullable": true
          },
          "cleaningCompanyName": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "loads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document.ArchivedEecdLoadMetadataDetail"
            },
            "nullable": true
          },
          "reference": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "hasAttachments": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Document.ArchivedEpplLoadMetadataDetail": {
        "type": "object",
        "properties": {
          "loaderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "internalReference": {
            "type": "string",
            "nullable": true
          },
          "customerReference": {
            "type": "string",
            "nullable": true
          },
          "outboundDeliveryReference": {
            "type": "string",
            "nullable": true
          },
          "loadingLocation": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document.ArchivedEpplMetadataDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "equipmentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "equipmentOperatorName": {
            "type": "string",
            "nullable": true
          },
          "uniqueEquipmentId": {
            "type": "string",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/PplStatusEnum"
          },
          "loads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document.ArchivedEpplLoadMetadataDetail"
            },
            "nullable": true
          },
          "reference": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document.EpplCompartmentLoadHistory": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "epplCounter": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastCleaningTime": {
            "type": "string",
            "nullable": true
          },
          "loads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.EPplLoad"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document.SendEEcdWithTransportOrderRequest": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "equipmentRef": {
            "type": "string",
            "nullable": true
          },
          "transportOrderRef": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentTypeEnum": {
        "enum": [
          "UNKNOWN",
          "LOADDOCUMENT",
          "SDS",
          "SIGNATURE",
          "CLEANINGDOCUMENT",
          "TRANSPORTORDER",
          "EECD",
          "EECO",
          "DEPOTDECLARATION",
          "OTHERS",
          "CUSTOMERDELIVERYNOTE",
          "SHIPPINGINSTRUCTIONS",
          "FREIGHTLETTER",
          "DANGEROUSGOODDECLARATION",
          "CUSTOMINVOICE",
          "CUSTOMDECLARATION",
          "CERTIFICATEOFANALYSIS"
        ],
        "type": "string"
      },
      "EftcoCleaningCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "NL": {
                "type": "string"
              },
              "EN": {
                "type": "string"
              },
              "FR": {
                "type": "string"
              },
              "DE": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EftcoCleaningCodes.EftcoCleaningCodeCreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "NL": {
                "type": "string"
              },
              "EN": {
                "type": "string"
              },
              "FR": {
                "type": "string"
              },
              "DE": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EftcoCleaningCodes.EftcoCleaningCodeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EftcoCleaningCodes.EftcoCleaningCodeUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "descriptions": {
            "type": "object",
            "properties": {
              "NL": {
                "type": "string"
              },
              "EN": {
                "type": "string"
              },
              "FR": {
                "type": "string"
              },
              "DE": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Equipment.CompartmentCleanliness": {
        "type": "object",
        "properties": {
          "cleanliness": {
            "$ref": "#/components/schemas/Equipment.CompartmentCleanlinessStateEnum"
          },
          "polymerCompleteness": {
            "$ref": "#/components/schemas/BookletData.PolymerCompletenessStateEnum"
          }
        },
        "additionalProperties": false
      },
      "Equipment.CompartmentCleanlinessStateEnum": {
        "enum": [
          "Clean",
          "Dirty",
          "Unknown"
        ],
        "type": "string"
      },
      "Equipment.EquipmentCleanliness": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/Equipment.EquipmentCleanlinessStateEnum"
          },
          "compartments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Equipment.CompartmentCleanliness"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Equipment.EquipmentCleanlinessStateEnum": {
        "enum": [
          "CompletelyClean",
          "PartiallyDirty",
          "CompletelyDirty",
          "Unknown"
        ],
        "type": "string"
      },
      "EquipmentTypeEnum": {
        "enum": [
          "TANKCONTAINER",
          "TANKTRAILER",
          "IBC",
          "RAILTANK"
        ],
        "type": "string"
      },
      "IdentificationCode.IdentificationCodeCreate": {
        "required": [
          "code",
          "name",
          "organisationId",
          "type"
        ],
        "type": "object",
        "properties": {
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/IdentificationCodeTypeEnum"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "isVerified": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentificationCode.IdentificationCodeDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/IdentificationCodeTypeEnum"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isVerified": {
            "type": "boolean"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IdentificationCode.IdentificationCodeTypeEnum": {
        "enum": [
          "Nallian",
          "Ean",
          "Duns",
          "Vat",
          "Scac",
          "Seagha",
          "Alias",
          "AS2",
          "SenderIdentifier",
          "IATA",
          "GoodsAccountabilityPartyCode",
          "BIC",
          "Eori",
          "NxtPortEntityId",
          "Uen",
          "Pincode",
          "Abn",
          "Pima",
          "HermesIdPickup",
          "HermesIdDropOff"
        ],
        "type": "string"
      },
      "IdentificationCodeTypeEnum": {
        "enum": [
          "Duns",
          "Vat",
          "Eori"
        ],
        "type": "string"
      },
      "IntegratedLoadingLocation.Input.IntegratedLoadingLocationCreate": {
        "required": [
          "allowUnloadingCustomerVisibility",
          "description",
          "loaderId",
          "productId",
          "specifiers"
        ],
        "type": "object",
        "properties": {
          "subgroup": {
            "type": "string",
            "nullable": true
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "allowUnloadingCustomerVisibility": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Input.IntegratedLoadingLocationDelete": {
        "required": [
          "loaderCode",
          "loaderCodeType",
          "productUniqueReference",
          "ref",
          "specifiers"
        ],
        "type": "object",
        "properties": {
          "subgroup": {
            "type": "string",
            "nullable": true
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "loaderCodeType": {
            "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeTypeEnum"
          },
          "loaderCode": {
            "minLength": 1,
            "type": "string"
          },
          "productUniqueReference": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Input.IntegratedLoadingLocationImport": {
        "required": [
          "allowUnloadingCustomerVisibility",
          "description",
          "loaderCode",
          "loaderCodeType",
          "productUniqueReference",
          "ref",
          "specifiers"
        ],
        "type": "object",
        "properties": {
          "subgroup": {
            "type": "string",
            "nullable": true
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "loaderCodeType": {
            "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeTypeEnum"
          },
          "loaderCode": {
            "minLength": 1,
            "type": "string"
          },
          "productUniqueReference": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "allowUnloadingCustomerVisibility": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Input.IntegratedLoadingLocationUpdate": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "allowUnloadingCustomerVisibility": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Output.IntegratedLoadingLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerId": {
            "type": "string",
            "format": "uuid"
          },
          "sellerName": {
            "type": "string",
            "nullable": true
          },
          "subgroup": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "uniqueReference": {
            "type": "string",
            "nullable": true
          },
          "allowUnloadingCustomerVisibility": {
            "type": "boolean"
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Output.IntegratedLoadingLocationMinimal": {
        "type": "object",
        "properties": {
          "loaderId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "uniqueReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegratedLoadingLocation.Output.Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "subgroup": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationLogTypeEnum": {
        "enum": [
          "Rejected",
          "AcceptedWithErrors",
          "Accepted"
        ],
        "type": "string"
      },
      "LanguageEnum": {
        "enum": [
          "NL",
          "EN",
          "FR",
          "DE"
        ],
        "type": "string"
      },
      "License.Input.LicenseSettingsUpdate": {
        "type": "object",
        "properties": {
          "archivalDurationInDays": {
            "type": "integer",
            "format": "int32"
          },
          "archivalRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "allowCleanerAddNrl": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchive": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchiveRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkTypeEnum": {
        "enum": [
          "D",
          "L",
          "C"
        ],
        "type": "string"
      },
      "LoadProcessStateEnum": {
        "enum": [
          "PLANNED",
          "ACCEPTED",
          "COMPLETED",
          "REJECTED",
          "CANCELLED",
          "MOVED",
          "UPDATED",
          "NONREGISTERED",
          "NONLICENSE"
        ],
        "type": "string"
      },
      "LoadingLocation.LoadingLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerName": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "loaderid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loaderName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoadingLocation.LoadingLocationCreate": {
        "required": [
          "loaderId",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoadingLocation.LoadingLocationImport": {
        "required": [
          "code",
          "codeType",
          "uniqueReference"
        ],
        "type": "object",
        "properties": {
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueReference": {
            "minLength": 1,
            "type": "string"
          },
          "codeType": {
            "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeTypeEnum"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoadingLocation.LoadingLocationUpdate": {
        "required": [
          "loaderId",
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoadingLocationData.IntegratedLoadingLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedByUser": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sellerId": {
            "type": "string",
            "format": "uuid"
          },
          "subgroup": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "loaderId": {
            "type": "string",
            "format": "uuid"
          },
          "specifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "uniqueReference": {
            "type": "string",
            "nullable": true
          },
          "allowUnloadingCustomerVisibility": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Log.EEcdLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "bookletId": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MasterData.Compartment": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "baffles": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MasterData.Equipment": {
        "required": [
          "equipmentType"
        ],
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "numberOfManholes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfCompartments": {
            "type": "integer",
            "format": "int32"
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Compartment"
            },
            "nullable": true
          },
          "isSubContracted": {
            "type": "boolean",
            "nullable": true
          },
          "subContractor": {
            "type": "string",
            "nullable": true
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "isIso6346Compliant": {
            "type": "boolean",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          },
          "tareWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tankTypeAdr": {
            "type": "string",
            "nullable": true
          },
          "minPressureAdr": {
            "type": "string",
            "nullable": true
          },
          "openingsAdr": {
            "type": "string",
            "nullable": true
          },
          "valvesAdr": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPressureTestAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "te": {
            "type": "string",
            "nullable": true
          },
          "tc": {
            "type": "string",
            "nullable": true
          },
          "fl": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tankInstructionUn": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionUn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextExaminationCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastInspectionCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mainInspection": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validitySp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cleanliness": {
            "$ref": "#/components/schemas/Equipment.EquipmentCleanliness"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentDelete": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "operatorId": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentFieldPut": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentIdentificationInfo": {
        "type": "object",
        "properties": {
          "uniqueEquipmentId": {
            "type": "string",
            "nullable": true
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentImport": {
        "required": [
          "equipmentType"
        ],
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "numberOfManholes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfCompartments": {
            "type": "integer",
            "format": "int32"
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Compartment"
            },
            "nullable": true
          },
          "isSubContracted": {
            "type": "boolean",
            "nullable": true
          },
          "subContractor": {
            "type": "string",
            "nullable": true
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "isIso6346Compliant": {
            "type": "boolean",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          },
          "tareWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tankTypeAdr": {
            "type": "string",
            "nullable": true
          },
          "minPressureAdr": {
            "type": "string",
            "nullable": true
          },
          "openingsAdr": {
            "type": "string",
            "nullable": true
          },
          "valvesAdr": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPressureTestAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "te": {
            "type": "string",
            "nullable": true
          },
          "tc": {
            "type": "string",
            "nullable": true
          },
          "fl": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tankInstructionUn": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionUn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextExaminationCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastInspectionCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mainInspection": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validitySp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentPost": {
        "required": [
          "equipmentType"
        ],
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "string",
            "format": "uuid"
          },
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "numberOfManholes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfCompartments": {
            "type": "integer",
            "format": "int32"
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Compartment"
            },
            "nullable": true
          },
          "isSubContracted": {
            "type": "boolean",
            "nullable": true
          },
          "subContractor": {
            "type": "string",
            "nullable": true
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "isIso6346Compliant": {
            "type": "boolean",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          },
          "tareWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tankTypeAdr": {
            "type": "string",
            "nullable": true
          },
          "minPressureAdr": {
            "type": "string",
            "nullable": true
          },
          "openingsAdr": {
            "type": "string",
            "nullable": true
          },
          "valvesAdr": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPressureTestAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "te": {
            "type": "string",
            "nullable": true
          },
          "tc": {
            "type": "string",
            "nullable": true
          },
          "fl": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tankInstructionUn": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionUn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextExaminationCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastInspectionCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mainInspection": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validitySp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.EquipmentPut": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "numberOfManholes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfCompartments": {
            "type": "integer",
            "format": "int32"
          },
          "compartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Compartment"
            },
            "nullable": true
          },
          "isSubContracted": {
            "type": "boolean"
          },
          "subContractor": {
            "type": "string",
            "nullable": true
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "isIso6346Compliant": {
            "type": "boolean",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          },
          "tareWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tankTypeAdr": {
            "type": "string",
            "nullable": true
          },
          "minPressureAdr": {
            "type": "string",
            "nullable": true
          },
          "openingsAdr": {
            "type": "string",
            "nullable": true
          },
          "valvesAdr": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastPressureTestAdr": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "te": {
            "type": "string",
            "nullable": true
          },
          "tc": {
            "type": "string",
            "nullable": true
          },
          "fl": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tankInstructionUn": {
            "type": "string",
            "nullable": true
          },
          "lastInspectionUn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextExaminationCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastInspectionCsc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mainInspection": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validitySp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.ExigentLicenseSummary": {
        "type": "object",
        "properties": {
          "isSeller": {
            "type": "boolean",
            "nullable": true
          },
          "isLoader": {
            "type": "boolean",
            "nullable": true
          },
          "isEquipmentOperator": {
            "type": "boolean",
            "nullable": true
          },
          "isCleaner": {
            "type": "boolean",
            "nullable": true
          },
          "isCommunityAdmin": {
            "type": "boolean",
            "nullable": true
          },
          "licenseValidUntil": {
            "type": "string",
            "format": "date-time"
          },
          "isIntegratedSeller": {
            "type": "boolean",
            "nullable": true
          },
          "isIntegratedLoader": {
            "type": "boolean",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "licenseId": {
            "type": "string",
            "format": "uuid"
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.License": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "licenseType": {
            "type": "string",
            "nullable": true
          },
          "isSeller": {
            "type": "boolean"
          },
          "isLoader": {
            "type": "boolean"
          },
          "isEquipmentOperator": {
            "type": "boolean"
          },
          "isCleaner": {
            "type": "boolean"
          },
          "isCommunityAdmin": {
            "type": "boolean"
          },
          "licenseeSize": {
            "type": "string",
            "nullable": true
          },
          "licenseNumber": {
            "type": "integer",
            "format": "int32"
          },
          "licenseValidFrom": {
            "type": "string",
            "format": "date-time"
          },
          "licenseValidUntil": {
            "type": "string",
            "format": "date-time"
          },
          "isIntegratedSeller": {
            "type": "boolean"
          },
          "isIntegratedLoader": {
            "type": "boolean"
          },
          "archivalDurationInDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "archivalRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "deprecated": true
          },
          "allowCleanerAddNrl": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchive": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchiveRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.LicenseSummary": {
        "type": "object",
        "properties": {
          "isSeller": {
            "type": "boolean",
            "nullable": true
          },
          "isLoader": {
            "type": "boolean",
            "nullable": true
          },
          "isEquipmentOperator": {
            "type": "boolean",
            "nullable": true
          },
          "isCleaner": {
            "type": "boolean",
            "nullable": true
          },
          "isCommunityAdmin": {
            "type": "boolean",
            "nullable": true
          },
          "licenseValidUntil": {
            "type": "string",
            "format": "date-time"
          },
          "isIntegratedSeller": {
            "type": "boolean",
            "nullable": true
          },
          "isIntegratedLoader": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.Loader": {
        "type": "object",
        "properties": {
          "codeType": {
            "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeTypeEnum"
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.Product": {
        "required": [
          "sellerId",
          "uniqueReference"
        ],
        "type": "object",
        "properties": {
          "sellerId": {
            "type": "string",
            "format": "uuid"
          },
          "sellerName": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "articleNumber": {
            "type": "string",
            "nullable": true
          },
          "articleName": {
            "type": "string",
            "nullable": true
          },
          "unNumber": {
            "type": "string",
            "nullable": true
          },
          "maximumEcdValidity": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueReference": {
            "minLength": 1,
            "type": "string"
          },
          "sdsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.SdsInfo"
            },
            "nullable": true
          },
          "numberOfAllowedPreviousLoads": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursWithouthCleaning": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursPreviousLoad": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loaders": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.ProductDelete": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "sellerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "uniqueReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.ProductImport": {
        "required": [
          "sellerId",
          "uniqueReference"
        ],
        "type": "object",
        "properties": {
          "sellerId": {
            "type": "string",
            "format": "uuid"
          },
          "sellerName": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "subGroup": {
            "type": "string",
            "nullable": true
          },
          "articleNumber": {
            "type": "string",
            "nullable": true
          },
          "articleName": {
            "type": "string",
            "nullable": true
          },
          "unNumber": {
            "type": "string",
            "nullable": true
          },
          "maximumEcdValidity": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueReference": {
            "minLength": 1,
            "type": "string"
          },
          "sdsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.SdsInfo"
            },
            "nullable": true
          },
          "numberOfAllowedPreviousLoads": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursWithouthCleaning": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxHoursPreviousLoad": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "loaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Loader"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.Sds": {
        "required": [
          "language",
          "linkType",
          "sdsDate"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "sdsDate": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "linkType": {
            "$ref": "#/components/schemas/LinkTypeEnum"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.SdsImport": {
        "required": [
          "language",
          "linkType",
          "sdsDate"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "sdsDate": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "linkType": {
            "$ref": "#/components/schemas/LinkTypeEnum"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "integer",
            "format": "int32"
          },
          "sellerId": {
            "type": "string",
            "format": "uuid"
          },
          "uniqueReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.SdsInfo": {
        "required": [
          "language",
          "linkType",
          "sdsDate"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "sdsDate": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "linkType": {
            "$ref": "#/components/schemas/LinkTypeEnum"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "fileLocation": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterData.UploadSdsDocumentResult": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "OneTimeBooklet.CompartmentWithLoad": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "nullable": true
          },
          "unNr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OneTimeBooklet.OneTimeBookletPost": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentTypeEnum"
          },
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "internalEquipmentCode": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "licensePlateCountry": {
            "type": "string",
            "nullable": true
          },
          "carrierName": {
            "type": "string",
            "nullable": true
          },
          "carrierAddress": {
            "type": "string",
            "nullable": true
          },
          "carrierContactDetail": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "compartmentsWithLoad": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneTimeBooklet.CompartmentWithLoad"
            },
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/CleaningTypeEnum"
          },
          "isUnaccompanied": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrganisationRoleEnum": {
        "enum": [
          "EquipmentOperator",
          "Seller",
          "Loader",
          "Cleaner"
        ],
        "type": "string"
      },
      "OrganisationSettings.OrganisationSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "archivalDurationInDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "archivalRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sdsInformation": {
            "$ref": "#/components/schemas/OrganisationSettings.Sds.SdsInformation"
          },
          "manageLocationCertification": {
            "type": "boolean",
            "nullable": true
          },
          "allowCleanerAddNrl": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchive": {
            "type": "boolean",
            "nullable": true
          },
          "monthlyArchiveRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationSettings.Sds.BaseAuthorization": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/uthorizationTypeEnum"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrganisationSettings.Sds.SdsInformation": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/OrganisationSettings.Sds.BaseAuthorization"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "fallbackUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationStateEnum": {
        "enum": [
          "ACTIVE",
          "DISABLED"
        ],
        "type": "string"
      },
      "Organisations.Input.OrganisationCreate": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/OrganisationStateEnum"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "nullable": true
          },
          "duns": {
            "type": "string",
            "nullable": true
          },
          "eori": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "type": "object",
            "properties": {
              "StreetAndNumber": {
                "type": "string"
              },
              "PoBox": {
                "type": "string"
              },
              "City": {
                "type": "string"
              },
              "PostalCode": {
                "type": "string"
              },
              "State": {
                "type": "string"
              },
              "StateCode": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "CountryCode": {
                "type": "string"
              },
              "Phone": {
                "type": "string"
              },
              "Fax": {
                "type": "string"
              },
              "Building": {
                "type": "string"
              },
              "Floor": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Organisations.Input.OrganisationUpdate": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/OrganisationStateEnum"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "nullable": true
          },
          "duns": {
            "type": "string",
            "nullable": true
          },
          "eori": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "type": "object",
            "properties": {
              "StreetAndNumber": {
                "type": "string"
              },
              "PoBox": {
                "type": "string"
              },
              "City": {
                "type": "string"
              },
              "PostalCode": {
                "type": "string"
              },
              "State": {
                "type": "string"
              },
              "StateCode": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "CountryCode": {
                "type": "string"
              },
              "Phone": {
                "type": "string"
              },
              "Fax": {
                "type": "string"
              },
              "Building": {
                "type": "string"
              },
              "Floor": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Organisations.Output.Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "$ref": "#/components/schemas/CleaningLocation.AddressLineResponse"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "webSite": {
            "type": "string",
            "nullable": true
          },
          "duns": {
            "type": "string",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "nullable": true
          },
          "eori": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organisations.Output.OrganisationRole"
            },
            "nullable": true
          },
          "settings": {
            "$ref": "#/components/schemas/Organisations.Output.OrganisationPublicSetting"
          }
        },
        "additionalProperties": false
      },
      "Organisations.Output.OrganisationMinimal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Organisations.Output.OrganisationPublicSetting": {
        "type": "object",
        "properties": {
          "allowCleanerAddNrl": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Organisations.Output.OrganisationRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PplStatusEnum": {
        "enum": [
          "SIGNEDOFF",
          "CANCELLED"
        ],
        "type": "string"
      },
      "ProductTypeEnum": {
        "enum": [
          "CHEMICAL",
          "FOOD",
          "FEED",
          "PHARMA"
        ],
        "type": "string"
      },
      "Reporting.CreatedEecdsReportDetail": {
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "eEcdsCreatedYearToDate": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedJan": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedFeb": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedMar": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedApr": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedMay": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedJun": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedJul": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedAug": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedSep": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedOct": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedNov": {
            "type": "integer",
            "format": "int32"
          },
          "eEcdsCreatedDec": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Reporting.CreatedEecosReportDetail": {
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "eEcosCreatedYearToDate": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedJan": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedFeb": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedMar": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedApr": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedMay": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedJun": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedJul": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedAug": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedSep": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedOct": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedNov": {
            "type": "integer",
            "format": "int32"
          },
          "eEcosCreatedDec": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Reporting.CreatedEpplsReportDetail": {
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "ePplsCreatedYearToDate": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedJan": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedFeb": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedMar": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedApr": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedMay": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedJun": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedJul": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedAug": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedSep": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedOct": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedNov": {
            "type": "integer",
            "format": "int32"
          },
          "ePplsCreatedDec": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Reporting.LicenseReportDetail": {
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "creditsPurchased": {
            "type": "integer",
            "format": "int32"
          },
          "creditsRemaining": {
            "type": "integer",
            "format": "int32"
          },
          "isCommunityAdmin": {
            "type": "boolean"
          },
          "isEquipmentOperator": {
            "type": "boolean"
          },
          "isLoader": {
            "type": "boolean"
          },
          "isCleaner": {
            "type": "boolean"
          },
          "isSeller": {
            "type": "boolean"
          },
          "mainCountry": {
            "type": "string",
            "nullable": true
          },
          "licenseNumber": {
            "type": "integer",
            "format": "int32"
          },
          "licenseSize": {
            "type": "string",
            "nullable": true
          },
          "licenseType": {
            "type": "string",
            "nullable": true
          },
          "licenseValidFrom": {
            "type": "string",
            "nullable": true
          },
          "licenseValidUntil": {
            "type": "string",
            "nullable": true
          },
          "registeredUserCount": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfPacks": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentLastMonth": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentYearToDate": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentJan": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentFeb": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentMar": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentApr": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentMay": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentJun": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentJul": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentAug": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentSep": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentOct": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentNov": {
            "type": "integer",
            "format": "int32"
          },
          "creditsSpentDec": {
            "type": "integer",
            "format": "int32"
          },
          "epplCreditsSpentOverall": {
            "type": "integer",
            "format": "int32"
          },
          "eecoCreditsSpentOverall": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Reporting.MonthlyArchiveDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Reporting.NonLicenseUserReportDetails": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "firstRegistration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Reporting.QrScanningFrequencyReportDetail": {
        "type": "object",
        "properties": {
          "eecdReference": {
            "type": "string",
            "nullable": true
          },
          "cleanerOrgName": {
            "type": "string",
            "nullable": true
          },
          "cleanerMainCountry": {
            "type": "string",
            "nullable": true
          },
          "cleanerLocationName": {
            "type": "string",
            "nullable": true
          },
          "cleanerLocationCountry": {
            "type": "string",
            "nullable": true
          },
          "cleanerSignOffAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "driverSignOffAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invalidatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eecdConsumedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastScannedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "frequencyOfScanning": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Reporting.QrScanningReportDetail": {
        "type": "object",
        "properties": {
          "eecdReference": {
            "type": "string",
            "nullable": true
          },
          "cleanerOrgName": {
            "type": "string",
            "nullable": true
          },
          "cleanerMainCountry": {
            "type": "string",
            "nullable": true
          },
          "cleanerLocationName": {
            "type": "string",
            "nullable": true
          },
          "cleanerLocationCountry": {
            "type": "string",
            "nullable": true
          },
          "oneTimeEquipmentId": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "action": {
            "type": "string",
            "nullable": true
          },
          "acceptanceComments": {
            "type": "string",
            "nullable": true
          },
          "rejectionReason": {
            "type": "string",
            "nullable": true
          },
          "cleanerSignOffAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "driverSignOffAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invalidatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eecdConsumedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "actionTimeStamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Reporting.RoyaltyReportDetail": {
        "type": "object",
        "properties": {
          "eecdReference": {
            "type": "string",
            "nullable": true
          },
          "cleanerOrganisationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "cleanerOrganisationName": {
            "type": "string",
            "nullable": true
          },
          "cleanerMainCountry": {
            "type": "string",
            "nullable": true
          },
          "cleaningLocationName": {
            "type": "string",
            "nullable": true
          },
          "cleaningLocationCountry": {
            "type": "string",
            "nullable": true
          },
          "invalidationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cleanerSignoffTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.BookletData.CleaningSummary": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.CleaningSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.BookletData.LoadSummary": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookletData.LoadSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.CreditData.WalletSummary": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditData.WalletSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.EEcdLog.EEcdLog": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log.EEcdLog"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.EecdDocument.ArchivedEecdMetadataDetail": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document.ArchivedEecdMetadataDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.EecdDocument.ArchivedEpplMetadataDetail": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document.ArchivedEpplMetadataDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.IdentificationCode.IdentificationCodeDetail": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentificationCode.IdentificationCodeDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.IntegratedLoadingLocation.Output.IntegratedLoadingLocation": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.LoadingLocation.LoadingLocation": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadingLocation.LoadingLocation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.MasterData.Equipment": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.Equipment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.MasterData.EquipmentField": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.EquipmentField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.MasterData.ExigentLicenseSummary": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterData.ExigentLicenseSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.Organisations.Output.Organisation": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organisations.Output.Organisation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultsPage.TransportOrders.Output.TransportOrder": {
        "type": "object",
        "properties": {
          "hitCountTotal": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "hitCountPage": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "pageCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pageTotal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasMorePages": {
            "type": "boolean",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportOrders.Output.TransportOrder"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Security.Authorization.Core.Controllers.SecurityContextDto": {
        "type": "object",
        "properties": {
          "rights": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransportOrderStatusEnum": {
        "enum": [
          "ORIGINAL",
          "UPDATED",
          "CANCELLED",
          "LOADED",
          "PARTIALLYLOADED",
          "OTHER"
        ],
        "type": "string"
      },
      "TransportOrders.Output.DeliveryNote": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportOrders.Output.DeliveryNoteLine"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransportOrders.Output.DeliveryNoteLine": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "isValid": {
            "type": "boolean"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "unitOfMeasure": {
            "type": "string",
            "nullable": true
          },
          "customerName": {
            "type": "string",
            "nullable": true
          },
          "customerIdentifier": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "loadingDate": {
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "$ref": "#/components/schemas/BookletData.Product"
          },
          "loadingLocation": {
            "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.IntegratedLoadingLocationMinimal"
          }
        },
        "additionalProperties": false
      },
      "TransportOrders.Output.TransportOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "documentIdentifier": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TransportOrderStatusEnum"
          },
          "sentOn": {
            "type": "string",
            "format": "date-time"
          },
          "transportReference": {
            "type": "string",
            "nullable": true
          },
          "seller": {
            "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.Organisation"
          },
          "equipmentOperator": {
            "$ref": "#/components/schemas/IntegratedLoadingLocation.Output.Organisation"
          },
          "deliveryNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportOrders.Output.DeliveryNote"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserStateEnum": {
        "enum": [
          "ACTIVE",
          "DISABLED"
        ],
        "type": "string"
      },
      "Users.Input.NluActivationDto": {
        "type": "object",
        "properties": {
          "confirmationToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Input.NluSignInDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "cleaningId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Input.NonLicenseUserCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "cleaningId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Input.UserCreate": {
        "type": "object",
        "properties": {
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/UserStateEnum"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "timezone": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Input.UserRoleUpdate": {
        "type": "object",
        "properties": {
          "roleIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Input.UserUpdate": {
        "type": "object",
        "properties": {
          "organisationId": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/UserStateEnum"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "timezone": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Output.NluAuthenResponseDto": {
        "type": "object",
        "properties": {
          "userToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Output.User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "userState": {
            "type": "string",
            "nullable": true
          },
          "organisationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "license": {
            "$ref": "#/components/schemas/MasterData.LicenseSummary"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Users.Output.UserRole"
            },
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Users.Output.UserRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyCertifiedCleaningLocationEnum": {
        "enum": [
          "VALID",
          "INVALID",
          "INVALIDDATE"
        ],
        "type": "string"
      },
      "uthorizationTypeEnum": {
        "enum": [
          "CERTIFICATE"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Please insert token into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}